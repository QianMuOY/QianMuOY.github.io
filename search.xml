<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>matplotlib</title>
      <link href="/2023/04/01/matplotlib/"/>
      <url>/2023/04/01/matplotlib/</url>
      
        <content type="html"><![CDATA[<h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1><h2 id="why-matplotlib"><a href="#why-matplotlib" class="headerlink" title="why matplotlib?"></a>why matplotlib?</h2><p>如果您使用过“工科神器”MATLAB，您一定会惊叹于MATLAB中惊人的可视化能力，其中的函数绘图，成为了无数SCI论文中真实数据配图的来源。小小的plot函数，画出了人类先进科学进步的曲线。</p><p>python中的matplotlib库，与MATLAB中的plot函数有点像，也许这正是它名字的来源。这是一个2D绘图库，利用它可以画出许多高质量的图像。只需几行代码即可生成直方图，条形图，饼图，散点图等。Matplotlib可用于Python脚本，Python和IPython shell，Jupyter笔记本，Web应用程序服务器和四个图形用户界面工具包。</p><p>希望以下教程可以为您带来一些帮助。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>请查看上方anaconda教程，配置好python环境。使用命令<code>pip install matplotlib</code> 或 <code>conda install matplotlib </code> 进行安装。使用时，直接import即可。</p><h2 id="Matplotlib-pyplot"><a href="#Matplotlib-pyplot" class="headerlink" title="Matplotlib.pyplot"></a>Matplotlib.pyplot</h2><p>Matplotlib 中的 pyplot 模块是一个类似命令风格的函数集合，这使得 Matplotlib 的工作模式和 MATLAB 相似。</p><p>pyplot 模块提供了可以用来绘图的各种函数，比如创建一个画布，在画布中创建一个绘图区域，或是在绘图区域添加一些线、标签等。以下表格对这些函数做了简单地介绍。若您有MATLAB基础，看着本节即可上手使用。</p><h2 id="绘图类型"><a href="#绘图类型" class="headerlink" title="绘图类型"></a>绘图类型</h2><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>Bar</td><td>绘制条形图</td></tr><tr><td>Barh</td><td>绘制水平条形图</td></tr><tr><td>Boxplot</td><td>绘制箱型图</td></tr><tr><td>Hist</td><td>绘制直方图</td></tr><tr><td>his2d</td><td>绘制2D直方图</td></tr><tr><td>Pie</td><td>绘制饼状图</td></tr><tr><td>Plot</td><td>在坐标轴上画线或者标记</td></tr><tr><td>Polar</td><td>绘制极坐标图</td></tr><tr><td>Scatter</td><td>绘制x与y的散点图</td></tr><tr><td>Stackplot</td><td>绘制堆叠图</td></tr><tr><td>Stem</td><td>用来绘制二维离散数据绘制（又称为“火柴图”）</td></tr><tr><td>Step</td><td>绘制阶梯图</td></tr><tr><td>Quiver</td><td>绘制一个二维按箭头</td></tr></tbody></table><h3 id="Image函数"><a href="#Image函数" class="headerlink" title="Image函数"></a>Image函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>Imread</td><td>从文件中读取图像的数据并形成数组。</td></tr><tr><td>Imsave</td><td>将数组另存为图像文件。</td></tr><tr><td>Imshow</td><td>在数轴区域内显示图像。</td></tr></tbody></table><h3 id="Axis函数"><a href="#Axis函数" class="headerlink" title="Axis函数"></a>Axis函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>Axes</td><td>在画布(Figure)中添加轴</td></tr><tr><td>Text</td><td>向轴添加文本</td></tr><tr><td>Title</td><td>设置当前轴的标题</td></tr><tr><td>Xlabel</td><td>设置x轴标签</td></tr><tr><td>Xlim</td><td>获取或者设置x轴区间大小</td></tr><tr><td>Xscale</td><td>设置x轴缩放比例</td></tr><tr><td>Xticks</td><td>获取或设置x轴刻标和相应标签</td></tr><tr><td>Ylabel</td><td>设置y轴的标签</td></tr><tr><td>Ylim</td><td>获取或设置y轴的区间大小</td></tr><tr><td>Yscale</td><td>设置y轴的缩放比例</td></tr><tr><td>Yticks</td><td>获取或设置y轴的刻标和相应标签</td></tr></tbody></table><h3 id="Figure函数"><a href="#Figure函数" class="headerlink" title="Figure函数"></a>Figure函数</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>Figtext</td><td>在画布上添加文本</td></tr><tr><td>Figure</td><td>创建一个新画布</td></tr><tr><td>Show</td><td>显示数字</td></tr><tr><td>Savefig</td><td>保存当前画布</td></tr><tr><td>Close</td><td>关闭画布窗口</td></tr></tbody></table><h2 id="第一个绘图程序"><a href="#第一个绘图程序" class="headerlink" title="第一个绘图程序"></a>第一个绘图程序</h2><p>首先导入 Matplotlib 包中的 Pyplot 模块，并以 as 别名的形式简化引入包的名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>接下来，使用 NumPy 提供的函数 arange() 创建一组数据来绘制图像。</p><p>如果您对numpy库并不了解，可以理解为这就是在生成列表数据即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#引入numpy包</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#获得0到2π之间的数据，每个数据间隔0.05</span></span><br><span class="line">x = np.arange(<span class="number">0</span>, math.pi*<span class="number">2</span>, <span class="number">0.05</span>)</span><br></pre></td></tr></table></figure><p>我们这里来绘制sin函数的值。使用numpy库内置函数计算出值（实际上是矩阵），放入y中，作为函数值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = np.sin(x)</span><br></pre></td></tr></table></figure><p>此时，使用plot函数进行绘制即可。绘制完后，需要使用show函数展示出来才行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x,y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20230318120404283.png" alt="image-20230318120404283"></p><p>这个图像实在是光秃秃。我们在show之前添加一些属性设置。设置上图像的标题、标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.xlabel(<span class="string">&quot;angle&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;sine&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;sine wave&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20230318120557553.png" alt="image-20230318120557553"></p><p>这样，图像勉强能看了。</p><p>您也可以在 Jupyter 笔记本中运行 Matplotlib 的绘图程序。通过命令行或者开始菜单的方式启动 Jupyter 笔记本。启动成功后，将上述代码拷贝到输入行内，如下所示：</p><p><img src="/.com//1522405532-1.gif" alt="jupyter使用"></p><p>%matplotlib inline 是 Jupyter 提供的魔法命令，它可以把输出图显示在笔记本内部，否则会以查看器的形式单独显示。</p><h2 id="title、label、坐标轴设置"><a href="#title、label、坐标轴设置" class="headerlink" title="title、label、坐标轴设置"></a>title、label、坐标轴设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.title(<span class="string">&quot;title&quot;</span>)<span class="comment">#括号当中输入标题的名称</span></span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">6</span>) <span class="comment">#x轴坐标轴</span></span><br><span class="line">plt.ylim((<span class="number">0</span>, <span class="number">3</span>))<span class="comment">#y轴坐标轴</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;X&#x27;</span>)<span class="comment">#x轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y&#x27;</span>)<span class="comment">#y轴标签</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>可以对相应属性进行设置。</p><p>其中，x、y坐标轴的设置，又一般使用plot函数进行设置。</p><h2 id="Figure画布对象与Axes坐标轴对象"><a href="#Figure画布对象与Axes坐标轴对象" class="headerlink" title="Figure画布对象与Axes坐标轴对象"></a>Figure画布对象与Axes坐标轴对象</h2><p>在matplotlib中，整个图像为一个Figure对象。在Figure对象中可以包含一个或者多个Axes对象。每个Axes(ax)对象都是一个拥有自己坐标系统的<strong>绘图区域</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">6</span>, <span class="number">3</span>))</span><br><span class="line">plt.plot(<span class="number">6</span>, <span class="number">3</span>)</span><br><span class="line">plt.plot(<span class="number">3</span>, <span class="number">3</span> * <span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20230318121336375.png" alt="image-20230318121336375"></p><p>如果我们要在一个代码中生成多张图，就需要多个画布，也就是多个figure对象。那么此时，我们就转变为对各个画布对象进行操作，而非plt库的默认画布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment">#创建图形对象</span></span><br><span class="line">fig = plt.figure()</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>figsize</td><td>指定画布的大小，(宽度,高度)，单位为英寸。</td></tr><tr><td>dpi</td><td>指定绘图对象的分辨率，即每英寸多少个像素，默认值为80。</td></tr><tr><td>facecolor</td><td>背景颜色。</td></tr><tr><td>dgecolor</td><td>边框颜色。</td></tr><tr><td>frameon</td><td>是否显示边框。</td></tr></tbody></table><p>有了画布，我们还要添加坐标轴对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ax = fig.add_axes([<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.8</span>,<span class="number">0.8</span>])</span><br></pre></td></tr></table></figure><p>add_axes() 的参数值是一个序列，序列中的 4 个数字分别对应图形的左侧，底部，宽度，和高度，且每个数字必须介于 0 到 1 之间。</p><p>即将画布的宽、高作为 1 个单位。比如，[ 0.1, 0.1, 0.8, 0.8]，它代表着从画布 10% 的位置开始绘制, 宽高是画布的 80%。</p><p>坐标轴对象可以设置标题，设置标签，进行绘图。与原本的库一样的调用方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, math.pi*<span class="number">2</span>, <span class="number">0.05</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_axes([<span class="number">0.1</span>,<span class="number">0.1</span>,<span class="number">0.8</span>,<span class="number">0.8</span>])</span><br><span class="line">ax.plot(x,y)</span><br><span class="line">ax.set_title(<span class="string">&quot;sine wave&quot;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;angle&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;sine&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20230318123811971.png" alt="image-20230318123811971"></p><h2 id="label、legend图例设置"><a href="#label、legend图例设置" class="headerlink" title="label、legend图例设置"></a>label、legend图例设置</h2><p>在画图时，可以添加label属性，传入图例。并通过legend启动，添加loc属性选择图例位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">0</span>, math.pi*<span class="number">2</span>, <span class="number">0.05</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x,y,label=<span class="string">&quot;sin&quot;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&quot;best&quot;</span>)<span class="comment">#图例位置，可选best，center等</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="一图多线"><a href="#一图多线" class="headerlink" title="一图多线"></a>一图多线</h2><p>在同一个figure下，直接使用plot进行画图即可。同一张图上可以全部显示出来。注意添加label参数以作区别。</p><p>如果要画多张图，可以在两个plot方法之间使用figure方法创造一个新的窗口，进行分别展示。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>有时候我们需要对特定的点进行标注，我们可以使用 plt.annotate 函数来实现:</p><p>s: 注释信息内容</p><p>xy:箭头点所在的坐标位置</p><p>xytext:注释内容的坐标位置</p><p>arrowprops：设置指向箭头的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">200</span>)<span class="comment">#从0到10之间等距产生200个值</span></span><br><span class="line">y=np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x,y,linestyle=<span class="string">&#x27;:&#x27;</span>,color=<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">plt.annotate(text=<span class="string">&#x27;here&#x27;</span>,xy=(<span class="number">3</span>,np.sin(<span class="number">3</span>)),xytext=(<span class="number">4</span>,-<span class="number">0.5</span>),weight=<span class="string">&#x27;bold&#x27;</span>,color=<span class="string">&#x27;b&#x27;</span>,arrowprops=<span class="built_in">dict</span>(arrowstyle=<span class="string">&#x27;-|&gt;&#x27;</span>,color=<span class="string">&#x27;k&#x27;</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20230318121953844.png" alt="image-20230318121953844"></p><h2 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h2><p>如果需要将多张子图展示在一起，可以使用 subplot() 实现。即在调用 plot()函数之前需要先调用 subplot() 函数。</p><p>该函数的第一个参数代表子图的总行数，</p><p>第二个参数代表子图的总列数，</p><p>第三个参数代表活跃区域。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ax1 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(x,np.sin(x), <span class="string">&#x27;k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax2 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, sharey=ax1) <span class="comment"># 与 ax1 共享y轴</span></span><br><span class="line">plt.plot(x, np.cos(x), <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax3 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">plt.plot(x,x, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax4 = plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, sharey=ax3) <span class="comment"># 与 ax3 共享y轴</span></span><br><span class="line">plt.plot(x, <span class="number">2</span>*x, <span class="string">&#x27;y&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20230318122150290.png" alt="image-20230318122150290"></p><p>同样的，这些图像支持各自传入各种各样的参数。</p><h2 id="plot的参数"><a href="#plot的参数" class="headerlink" title="plot的参数"></a>plot的参数</h2><p>plot函数支持传入各种参数，不需要在外部再手动设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单条线：</span></span><br><span class="line">plot([x], y, [fmt], data=<span class="literal">None</span>, **kwargs)</span><br><span class="line"><span class="comment">#多条线一起画</span></span><br><span class="line">plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)</span><br></pre></td></tr></table></figure><p>可选参数[fmt] 是一个字符串来定义图的基本属性如：颜色（color），点型（marker），线型（linestyle），</p><p>具体形式  fmt &#x3D; ‘[color] [ marker ] [ line ]’</p><p>fmt接收的是每个属性的单个字母缩写。</p><pre><code>=============    ===============================character        color=============    ===============================``&#39;b&#39;``          blue 蓝``&#39;g&#39;``          green 绿``&#39;r&#39;``          red 红``&#39;c&#39;``          cyan 蓝绿``&#39;m&#39;``          magenta 洋红``&#39;y&#39;``          yellow 黄``&#39;k&#39;``          black 黑``&#39;w&#39;``          white 白=============    ===============================</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">=============    ===============================</span><br><span class="line">    character        description</span><br><span class="line">    =============    ===============================</span><br><span class="line">    ``&#x27;.&#x27;``          point marker</span><br><span class="line">    ``&#x27;,&#x27;``          pixel marker</span><br><span class="line">    ``&#x27;o&#x27;``          circle marker</span><br><span class="line">    ``&#x27;v&#x27;``          triangle_down marker</span><br><span class="line">    ``&#x27;^&#x27;``          triangle_up marker</span><br><span class="line">    ``&#x27;&lt;&#x27;``          triangle_left marker</span><br><span class="line">    ``&#x27;&gt;&#x27;``          triangle_right marker</span><br><span class="line">    ``&#x27;1&#x27;``          tri_down marker</span><br><span class="line">    ``&#x27;2&#x27;``          tri_up marker</span><br><span class="line">    ``&#x27;3&#x27;``          tri_left marker</span><br><span class="line">    ``&#x27;4&#x27;``          tri_right marker</span><br><span class="line">    ``&#x27;s&#x27;``          square marker</span><br><span class="line">    ``&#x27;p&#x27;``          pentagon marker</span><br><span class="line">    ``&#x27;*&#x27;``          star marker</span><br><span class="line">    ``&#x27;h&#x27;``          hexagon1 marker</span><br><span class="line">    ``&#x27;H&#x27;``          hexagon2 marker</span><br><span class="line">    ``&#x27;+&#x27;``          plus marker</span><br><span class="line">    ``&#x27;x&#x27;``          x marker</span><br><span class="line">    ``&#x27;D&#x27;``          diamond marker</span><br><span class="line">    ``&#x27;d&#x27;``          thin_diamond marker</span><br><span class="line">    ``&#x27;|&#x27;``          vline marker</span><br><span class="line">    ``&#x27;_&#x27;``          hline marker</span><br><span class="line">    =============    ===============================</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=============    ===============================</span><br><span class="line">character        description</span><br><span class="line">=============    ===============================</span><br><span class="line">``&#x27;-&#x27;``          solid line style 实线</span><br><span class="line">``&#x27;--&#x27;``         dashed line style 虚线</span><br><span class="line">``&#x27;-.&#x27;``         dash-dot line style 点画线</span><br><span class="line">``&#x27;:&#x27;``          dotted line style 点线</span><br><span class="line">=============    ===============================</span><br></pre></td></tr></table></figure><p>另外，支持color&#x3D;，linestyle&#x3D;，label&#x3D;关键字传参，具体可参照官方文档，或参考上方plt.xxx设置。一般都有对应的参数。</p><h2 id="各种其他图"><a href="#各种其他图" class="headerlink" title="各种其他图"></a>各种其他图</h2><p>参考绘图类型节即可。这里以柱状图为例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">y = np.random.randint(<span class="number">0</span>,<span class="number">20</span>,<span class="number">10</span>)</span><br><span class="line">plt.bar(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2023/03/27/git/"/>
      <url>/2023/03/27/git/</url>
      
        <content type="html"><![CDATA[<h1 id="git远程仓库"><a href="#git远程仓库" class="headerlink" title="git远程仓库"></a>git远程仓库</h1><p>网址：<a href="https://github.com/">https://github.com</a></p><p>张朝阳账户：<a href="mailto:&#x7a;&#104;&#97;&#x6e;&#x67;&#x7a;&#104;&#97;&#111;&#x79;&#x61;&#110;&#x67;&#64;&#x63;&#x68;&#100;&#46;&#x65;&#100;&#x75;&#46;&#99;&#x6e;">&#x7a;&#104;&#97;&#x6e;&#x67;&#x7a;&#104;&#97;&#111;&#x79;&#x61;&#110;&#x67;&#64;&#x63;&#x68;&#100;&#46;&#x65;&#100;&#x75;&#46;&#99;&#x6e;</a>   用户名zhzj0218，密码：一般密码</p><p>以将&#x2F;d&#x2F;gitproject&#x2F;pycharm_python_and_pyqt中的文件同步到git中的zhzj0218下的pycharm_python_and_pyqt为例</p><p>[TOC]</p><h2 id="查看分支状态"><a href="#查看分支状态" class="headerlink" title="查看分支状态"></a>查看分支状态</h2><p>git status</p><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>git init 把当前的目录变成Git管理的版本库</p><p>git status 查看当前分支状态</p><p>git add . 把当前文件夹下的文件提交到暂存区</p><p>紧接着git commit -m “提交标签，如first proposed” 把暂存区提交到版本库</p><p>执行git status查看状态，确保工作区是干净的，没有需要提交的内容</p><p>（git log查看提交日志，git reflog查看提交版本号）</p><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><p>git remote -v查看远程版本库信息</p><p>创建github上的git仓库，例如在github的zhzj0218下创建了仓库pycharm_python_and_pyqt.git</p><p>git remote add origin <a href="https://github.com/zhzj0218/pycharm_python_and_pyqt.git">https://github.com/zhzj0218/pycharm_python_and_pyqt.git</a></p><p>将本地仓库关联到Github仓库</p><p>再次查看git remote -v，确认远程仓库关联成功</p><p>git push -u origin master 将本地仓库的内容推送到Github仓库</p><h2 id="远程库克隆到本地"><a href="#远程库克隆到本地" class="headerlink" title="远程库克隆到本地"></a>远程库克隆到本地</h2><p>git clone <a href="https://github.com/zhzj0218/pycharm_python_and_pyqt.git">https://github.com/zhzj0218/pycharm_python_and_pyqt.git</a></p><p>将远程仓库的内容克隆到本地</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="创建版本库-1"><a href="#创建版本库-1" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>git clone <url> 克隆远程版本库到本地</url></p><p>git init 初始化本地版本库</p><h3 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h3><p>git status 查看状态，也可查看冲突的文件</p><p>git dif 查看变更内容</p><p>git add . 跟踪所有改动过的内容</p><p>git add <file> 跟踪制定的文件</file></p><p>git mv <old> <new> 文件改名</new></old></p><p>git rm <file> 删除文件</file></p><p>git rm –cached <file> 停止跟踪文件但不删除</file></p><p>git commit -m “commit message” 提交所有更新过的文件</p><p>git commit –amend 修改最后一次提交</p><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><p>git log 查看提交历史</p><p>git log -p <file> 查看指定文件的提交历史</file></p><p>git blame <file> 以列表方式查看指定文件的提交历史</file></p><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><p>git reset –hard HEAD 撤销工作目录中所有未提交文件的修改内容</p><p>git checkout HEAD <file> 撤销指定的未提交文件的修改内容</file></p><p>git revert <commit> 撤销指定的提交</commit></p><p>git reset –hard HEAD^ 还原到上一个版本</p><p>git reset –hard 18b6a 回到之前版本，此处18b6a为某个版本号，版本号无需写全</p><p>（git log查看提交历史，可看到版本号，git log –pretty&#x3D;oneline可简化输出查看版本号，HEAD^表示上一次版本，HEAD^^表示上上一个版本，也可以用数字表示，HEAD~2，也可以用git reflog查看版本号，此时的版本号较短，为简短版本号）</p><p>git checkout – <file> 文件没有添加到暂存区时，撤回工作区的修改</file></p><p>git reset HEAD <file> 文件已经添加到暂存区时，撤销暂存区的修改，然后再使用git check – <file> 撤回工作区的修改</file></file></p><h3 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h3><p>git branch 显示所有本地分支</p><p>git checkout &lt;branch&#x2F;tag&gt; 切换到指定分支或者标签</p><p>git branch <new-branch> 创建新分支</new-branch></p><p>git branch -d <branch> 删除本地分支</branch></p><p>git tag 列出所有本地标签</p><p>git tag <tagname>基于最新提交创建标签</tagname></p><p>git tag -d <tagname> 删除标签</tagname></p><h3 id="合并与衍合"><a href="#合并与衍合" class="headerlink" title="合并与衍合"></a>合并与衍合</h3><p>git merge <branch> 合并指定分支到当前分支</branch></p><p>git rebase <branch> 衍合指定分支到当前分支</branch></p><h3 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h3><p>git remote -v 查看远程版本库信息</p><p>git remote show <remote> 查看指定远程版本库信息</remote></p><p>git remote add <remote> <url> 添加远程版本库</url></remote></p><p>git fetch <remote> 从远程库获取代码</remote></p><p>git pull <remote> <branch> 下载代码及快速合并</branch></remote></p><p>git push <remote> <branch> 上传代码及快速合并</branch></remote></p><p>git push <remote>  :&lt;branch&#x2F;tag-name&gt; 删除远程分支或标签</remote></p><p>git push –tags 上传所有标签</p><p>git remote rm origin移除原先错误的origin remote</p><h3 id="查看和修改用户名和邮箱"><a href="#查看和修改用户名和邮箱" class="headerlink" title="查看和修改用户名和邮箱"></a>查看和修改用户名和邮箱</h3><p>git config user.name查看用户名</p><p>git config user.email查看邮箱</p><p>git config –global user.name “your name”修改用户名为your name</p><p>git config –global user.email “your email”修改用户名为your email</p><h3 id="密码输入错误的解决方法"><a href="#密码输入错误的解决方法" class="headerlink" title="密码输入错误的解决方法"></a>密码输入错误的解决方法</h3><p>在控制面板，管理windows凭证，修改正确的密码</p><h3 id="大文件上传"><a href="#大文件上传" class="headerlink" title="大文件上传"></a>大文件上传</h3><p>git默认不能上传超过100M的文件，如果上传100M的文件，则会出现fatal: The remote end hung up unexpectedly的错误，表示存在大文件不能上传。因此需要处理大文件的上传。</p><p>示例：假设当前存在后缀为.exe，.zip及.whl的大文件，处理步骤如下：</p><p>git lfs install 安装lfs</p><p>git lfs track “*.zip”</p><p>git lfs track “*.exe”</p><p>git lfs track “*.whl”</p><p>则文件夹中生成的.gitattributes文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*.exe filter=lfs diff=lfs merge=lfs -text</span><br><span class="line">*.zip filter=lfs diff=lfs merge=lfs -text</span><br><span class="line">*.whl filter=lfs diff=lfs merge=lfs -text</span><br></pre></td></tr></table></figure><p>git add .gitattributes 将.gitattributes文件加入到暂存区</p><p>git commit -m “add lfs file” 提交文件</p><p>git push origin master 将本地仓库内容提交到Github仓库（包含大文件提交，提交的大文件具有lfs标签，表明为大文件）</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于深度学习的端到端自动驾驶</title>
      <link href="/2023/03/27/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%AB%AF%E5%88%B0%E7%AB%AF%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/"/>
      <url>/2023/03/27/%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E7%AB%AF%E5%88%B0%E7%AB%AF%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="基于深度学习的端到端自动驾驶"><a href="#基于深度学习的端到端自动驾驶" class="headerlink" title="基于深度学习的端到端自动驾驶"></a>基于深度学习的端到端自动驾驶</h1><p>from:欧阳铭  email: <a href="mailto:&#99;&#x68;&#x64;&#x2d;&#113;&#x69;&#97;&#110;&#109;&#x75;&#64;&#x71;&#113;&#46;&#99;&#111;&#x6d;">&#99;&#x68;&#x64;&#x2d;&#113;&#x69;&#97;&#110;&#109;&#x75;&#64;&#x71;&#113;&#46;&#99;&#111;&#x6d;</a>  qq:3315853846</p><p>特别感谢:<a href="https://blog.csdn.net/qianbin3200896/article/details/119832583">钱斌的博客</a> </p><p>##1.模拟平台安装和基本使用</p><p>###1.1模拟器的安装</p><p>下载地址：<a href="https://github.com/tawnkramer/gym-donkeycar/releases">右键或点击此处</a>或按住ctrl+&#x2F;进入代码模式，复制链接到浏览器打开。</p><p>该地址中提供的模拟器是基于Unity开发的，是经过删减过后的可执行程序，不再需要额外安装unity，下载下来后就可以直接运行。目前覆盖windows、Linux、Mac共3个版本。以下只讲解如何在windows平台上运行和使用该模拟器。</p><p>下载完成后运行donkey_sim.exe文件即可进入模拟器。左边是设置，根据自己的需要进行设置即可。</p><p>在场景中，如果我们前面主界面使用了手工模式（paceCar处勾选manualDriving），那么我们就可以通过键盘来操控小车进行体验了。与一般的赛车游戏类似，W键表示前进，A表示左转，D表示右转，S表示后退。</p><p>在该模拟器中，控制小车的主要是两个参数：油门（W和S键）和转向角度（A和D键），这个与我们真实驾驶的汽车基本一致：挂挡+踩油门来控制前进动力，打方向盘控制车辆转向。为了能够实现自动驾驶，我们首先要能够根据这两个参数去控制模拟器里面小车的运行。我们怎么样通过Python代码来控制这个模拟器呢？</p><h3 id="1-2git工具的安装与配置"><a href="#1-2git工具的安装与配置" class="headerlink" title="1.2git工具的安装与配置"></a>1.2git工具的安装与配置</h3><p>详细的git工具安装与教程请参照<a href="https://blog.csdn.net/mukes/article/details/115693833">这篇文章</a>，这里仅描述如何在pycharm中使用git</p><h4 id="1-2-1注册github账号"><a href="#1-2-1注册github账号" class="headerlink" title="1.2.1注册github账号"></a>1.2.1注册github账号</h4><p> <a href="https://github.com/">GitHub官网</a> 按照提示进行注册。请注意记下用户名和邮箱地址，下面步骤需要使用。</p><p>####1.2.2安装git</p><p> <a href="https://git-scm.com/">到git官网下载git安装包</a>，点击downloads，选择操作平台(windows)，下载完成后运行，第一次选择全勾，后面一直下一步即可。</p><p>下载完成后，运行cmd，输入命令检查下载版本。能正确显示版本即为安装成功</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure><p>####1.2.3配置git</p><p>安装成功后，配置git</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email  &quot;用户邮箱&quot;</span><br></pre></td></tr></table></figure><p><strong>请注意此处空格必须严格遵循，否则将无法配置成功。建议直接复制过去改。</strong></p><p>检查配置是否成功。在最下面会出现属性user.name与user.email，如果没有请重新到回到上一步。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><h4 id="1-2-4在pycharm中配置git"><a href="#1-2-4在pycharm中配置git" class="headerlink" title="1.2.4在pycharm中配置git"></a>1.2.4在pycharm中配置git</h4><p>file-&gt;settings-&gt;version control-&gt;git，一般此处默认检测系统中安装的第一个git，如果没有检测到请手动选择。</p><p> <a href="https://blog.csdn.net/zeroooorez/article/details/94715752">具体git操作请参照这篇文章</a> 这里不进行描述。</p><p>###1.3自动驾驶初体验</p><p>这个模拟器的好处就在于预留了Python控制接口，我们只需要安装一个驱动库就可以直接驱动模拟器里面的小车运行（提前安装好Git工具）：</p><p>在pycharm下方终端输入以下pip命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/tawnkramer/gym-donkeycar</span><br></pre></td></tr></table></figure><p> 安装好以后我们可以运行下面的python代码来实现小车的控制（注意：运行下面的代码前先启动模拟器，并停留在模拟器对应地图里） ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> gym_donkeycar</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 设置模拟器环境</span></span><br><span class="line">env = gym.make(<span class="string">&quot;donkey-generated-roads-v0&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重置当前场景</span></span><br><span class="line">obv = env.reset()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 运行100帧</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="comment"># 定义控制动作</span></span><br><span class="line">    action = np.array([<span class="number">0.3</span>,<span class="number">0.5</span>]) <span class="comment"># 动作控制，0.3表示转向，0.5表示油门</span></span><br><span class="line">    <span class="comment"># 执行动作</span></span><br><span class="line">    obv, reward, done, info = env.step(action)</span><br><span class="line">    <span class="comment"># 取一张图像保存</span></span><br><span class="line">    <span class="keyword">if</span> t == <span class="number">20</span>:</span><br><span class="line">        img = cv2.cvtColor(obv,cv2.COLOR_RGB2BGR)</span><br><span class="line">        cv2.imwrite(<span class="string">&#x27;test.jpg&#x27;</span>,img)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 运行完以后重置当前场景</span></span><br><span class="line">obv = env.reset()</span><br></pre></td></tr></table></figure><p> 我们先分析下这段代码。下面这行代码用于设置模拟器环境，简单来说就是启用哪张地图： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env = gym.make(<span class="string">&quot;donkey-generated-roads-v0&quot;</span>)</span><br></pre></td></tr></table></figure><p>在这个模拟器里面我们可以用到的地图如下所示：</p><ul><li><p>“donkey-warehouse-v0”</p></li><li><p>“donkey-generated-roads-v0”</p></li><li><p>“donkey-avc-sparkfun-v0”</p></li><li><p>“donkey-generated-track-v0”</p></li><li><p>“donkey-roboracingleague-track-v0”</p></li><li><p>“donkey-waveshare-v0”</p></li><li><p>“donkey-minimonaco-track-v0”</p></li><li><p>“donkey-warren-track-v0”</p></li><li><p>“donkey-thunderhill-track-v0”</p></li><li><p>“donkey-circuit-launch-track-v0”<br>  接下来的代码里面，我们运行了100帧，每帧都用固定的控制参数来执行：右转0.3、前进0.5。这两个字段就是我们前面提到的转向和油门值。下面给出这两个值的具体定义：</p></li></ul><p>油门值取值范围是[-1，1]，负值代表倒退，正值代表前进。转向值取值范围也是[-1，1]，负值代表向左，正值代表向右。</p><p>接下来使用np.array封装这两个参数，然后通过env.step来执行单步动作。执行完动作以后会返回一些信息，其中我们需要重点关注obs这个返回参数，这个参数表示当前位于小车正中间行车记录仪摄像头返回的一帧图像 ，图像宽160像素，高120像素，3通道RGB图像。可以在代码根目录下找到test.jpg文件查看。</p><p><a href="https://www.bilibili.com/video/BV1Wy4y1h7ii?share_source=copy_web">numpy教程十分钟入门</a></p><p><a href="https://www.bilibili.com/video/BV1Fo4y1d7JL?share_source=copy_web">openCV教程 黑马程序员</a></p><p>建议观看以上视频，学习一定的基础知识。当然没有这样的知识硬记语法也是可以的。</p><h2 id="2-基于OpenCV的自动驾驶控制"><a href="#2-基于OpenCV的自动驾驶控制" class="headerlink" title="2.基于OpenCV的自动驾驶控制"></a>2.基于OpenCV的自动驾驶控制</h2><p>在学习自动驾驶前，我们先看看传统算法是怎么解决自动驾驶任务的。本节为后续自动驾驶作铺垫，如果不感兴趣可以直接跳转到深度学习部分。</p><p>我们希望通过算法来控制小车，最终让这个小车稳定运行在行车道内。这里面涉及到两方面：感知和动作规划。感知部分我们主要通过行道线检测来实现，动作规划通过操控转向角度来实现。行道线检测的目的就是希望能够根据检测到的行道线位置来计算最终应该转向的角度，从而控制小车始终运行在当前车道线内。</p><p>由于道路环境比较简单，针对我们这个任务，我们进一步简化我们的控制变量，我们只控制转向角度，对于油门值我们在运行时保持低匀速，这样我们的重点就可以放在一个变量上面—转向角度。</p><h3 id="2-1基于HSV空间的特定颜色区域提取"><a href="#2-1基于HSV空间的特定颜色区域提取" class="headerlink" title="2.1基于HSV空间的特定颜色区域提取"></a>2.1基于HSV空间的特定颜色区域提取</h3><p> 颜色过滤是目前经常被使用到的图像处理技巧之一，例如天气预报抠像等，经常会使用绿幕作为背景进行抠图。本小节使用颜色过滤来初步提取出行道线。 </p><p>从模拟平台的图像数据上进行分析，小车左侧是黄实线，右侧是白实线。我们希望小车一直运行在这两根线之间。因此，我们首先要定位出这两根线。我们可以通过颜色空间变换来定位这两根线。</p><p>为了方便将黄色线和白色线从图像中过滤出来，我们需要将图像从RGB空间转换到HSV空间再处理。</p><p>这里首先我们解释下RGB和HSV颜色空间的区别。</p><p>RGB 是我们接触最多的颜色空间，由三个通道表示一幅图像，分别为红色(R)，绿色(G)和蓝色(B)。这三种颜色的不同组合可以形成几乎所有的其他颜色。RGB 颜色空间是图像处理中最基本、最常用、面向硬件的颜色空间，比较容易理解。RGB 颜色空间利用三个颜色分量的线性组合来表示颜色，任何颜色都与这三个分量有关，而且这三个分量是高度相关的，所以连续变换颜色时并不直观，想对图像的颜色进行调整需要更改这三个分量才行。自然环境下获取的图像容易受自然光照、遮挡和阴影等情况的影响，即对亮度比较敏感。而 RGB 颜色空间的三个分量都与亮度密切相关，即只要亮度改变，三个分量都会随之相应地改变，而没有一种更直观的方式来表达。但是人眼对于这三种颜色分量的敏感程度是不一样的，在单色中，人眼对红色最不敏感，蓝色最敏感，所以 RGB 颜色空间是一种均匀性较差的颜色空间。如果颜色的相似性直接用欧氏距离来度量，其结果与人眼视觉会有较大的偏差。对于某一种颜色，我们很难推测出较为精确的三个分量数值来表示。所以，RGB 颜色空间适合于显示系统，却并不适合于图像处理。</p><p>基于上述理由，在图像处理中使用较多的是 HSV 颜色空间，它比 RGB 更接近人们对彩色的感知经验。非常直观地表达颜色的色调、鲜艳程度和明暗程度，方便进行颜色的对比。在 HSV 颜色空间下，比 BGR 更容易跟踪某种颜色的物体，常用于分割指定颜色的物体。HSV 表达彩色图像的方式由三个部分组成：</p><ul><li><p>Hue（色调、色相）</p></li><li><p>Saturation（饱和度、色彩纯净度）</p></li><li><p>Value（明度）</p></li></ul><p>其中Hue用角度度量，取值范围为0～360°，表示色彩信息，即所处的光谱颜色的位置，如下图所示。</p><p> <img src="/.com//b544148acdca474388fc0347f155d4f1.png" alt="img"> </p><p>如果我们想要过滤出黄色线，那么我们就可以将色调范围控制在[30~ 90]之间即可。注意：在OpenCV中色调范围是[0~ 180]，因此上述黄色范围需要缩小1倍，即[15~ 45]。检测白色行道线也是采用类似的原理。 </p><p>RGB转化到HSV的算法(c++):</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">float</span> <span class="title">retmax</span><span class="params">(<span class="type">float</span> a,<span class="type">float</span> b,<span class="type">float</span> c)</span><span class="comment">//求最大值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> max = <span class="number">0</span>;</span><br><span class="line">    max = a;</span><br><span class="line">    <span class="keyword">if</span>(max&lt;b)</span><br><span class="line">        max = b;</span><br><span class="line">    <span class="keyword">if</span>(max&lt;c)</span><br><span class="line">        max = c;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">retmin</span><span class="params">(<span class="type">float</span> a,<span class="type">float</span> b,<span class="type">float</span> c)</span><span class="comment">//求最小值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> min = <span class="number">0</span>;</span><br><span class="line">    min = a;</span><br><span class="line">    <span class="keyword">if</span>(min&gt;b)</span><br><span class="line">        min = b;</span><br><span class="line">    <span class="keyword">if</span>(min&gt;c)</span><br><span class="line">        min = c;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//R,G,B参数传入范围（0~100）</span></span><br><span class="line"><span class="comment">//转换结果h(0~360),s(0~100),v(0~100)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rgb_to_hsv</span><span class="params">(<span class="type">float</span> *h,<span class="type">float</span> *s,<span class="type">float</span> *v,<span class="type">float</span> R,<span class="type">float</span> G,<span class="type">float</span> B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> max = <span class="number">0</span>,min = <span class="number">0</span>;</span><br><span class="line">    R = R/<span class="number">100</span>;</span><br><span class="line">    G = G/<span class="number">100</span>;</span><br><span class="line">    B = B/<span class="number">100</span>;</span><br><span class="line"> </span><br><span class="line">    max = <span class="built_in">retmax</span>(R,G,B);</span><br><span class="line">    min = <span class="built_in">retmin</span>(R,G,B);</span><br><span class="line">    *v = max;</span><br><span class="line">    <span class="keyword">if</span>(max == <span class="number">0</span>)</span><br><span class="line">        *s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        *s = <span class="number">1</span> - (min/max);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(max == min)</span><br><span class="line">        *h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(max == R &amp;&amp; G&gt;=B)</span><br><span class="line">        *h = <span class="number">60</span>*((G-B)/(max-min));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(max == R &amp;&amp; G&lt;B)</span><br><span class="line">        *h = <span class="number">60</span>*((G-B)/(max-min)) + <span class="number">360</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(max == G)</span><br><span class="line">        *h = <span class="number">60</span>*((B-R)/(max-min)) + <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(max == B)</span><br><span class="line">        *h = <span class="number">60</span>*((R-G)/(max-min)) + <span class="number">240</span>;</span><br><span class="line"> </span><br><span class="line">    *v = *v * <span class="number">100</span>;</span><br><span class="line">    *s = *s * <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HSV转RGB算法：(c++)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数入参范围h(0~360),s(0~100),v(0~100),这里要注意，要把s,v缩放到0~1之间</span></span><br><span class="line"><span class="comment">//转换结果R(0~100),G(0~100),B(0~100)，如需转换到0~255，只需把后面的乘100改成乘255</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hsv_to_rgb</span><span class="params">(<span class="type">int</span> h,<span class="type">int</span> s,<span class="type">int</span> v,<span class="type">float</span> *R,<span class="type">float</span> *G,<span class="type">float</span> *B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> C = <span class="number">0</span>,X = <span class="number">0</span>,Y = <span class="number">0</span>,Z = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> H=(<span class="type">float</span>)(h);</span><br><span class="line">    <span class="type">float</span> S=(<span class="type">float</span>)(s)/<span class="number">100.0</span>;</span><br><span class="line">    <span class="type">float</span> V=(<span class="type">float</span>)(v)/<span class="number">100.0</span>;</span><br><span class="line">    <span class="keyword">if</span>(S == <span class="number">0</span>)</span><br><span class="line">        *R = *G = *B = V;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        H = H/<span class="number">60</span>;</span><br><span class="line">        i = (<span class="type">int</span>)H;</span><br><span class="line">        C = H - i;</span><br><span class="line"> </span><br><span class="line">        X = V * (<span class="number">1</span> - S);</span><br><span class="line">        Y = V * (<span class="number">1</span> - S*C);</span><br><span class="line">        Z = V * (<span class="number">1</span> - S*(<span class="number">1</span>-C));</span><br><span class="line">        <span class="keyword">switch</span>(i)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span> : *R = V; *G = Z; *B = X; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> : *R = Y; *G = V; *B = X; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> : *R = X; *G = V; *B = Z; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span> : *R = X; *G = Y; *B = V; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span> : *R = Z; *G = X; *B = V; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span> : *R = V; *G = X; *B = Y; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *R = *R *<span class="number">100</span>;</span><br><span class="line">    *G = *G *<span class="number">100</span>;</span><br><span class="line">    *B = *B *<span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而以上方法在opencv中都有封装，仅需要一句代码即可实现。现在我们来检测黄色线与白色线。</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取图像并转换到HSV空间</span></span><br><span class="line">frame = cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line">hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 黄色线检测</span></span><br><span class="line">lower_blue = np.array([<span class="number">15</span>, <span class="number">40</span>, <span class="number">40</span>])</span><br><span class="line">upper_blue = np.array([<span class="number">45</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">yellow_mask = cv2.inRange(hsv, lower_blue, upper_blue)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;yellow_mask.jpg&#x27;</span>,yellow_mask)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 白色线检测</span></span><br><span class="line">lower_blue = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>])</span><br><span class="line">upper_blue = np.array([<span class="number">180</span>, <span class="number">30</span>, <span class="number">255</span>])</span><br><span class="line">white_mask = cv2.inRange(hsv, lower_blue, upper_blue)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;white_mask.jpg&#x27;</span>,white_mask)</span><br></pre></td></tr></table></figure><p>运行效果如下图：</p><p><img src="/.com//white_mask.jpg"></p><p><img src="/.com//yellow_mask.jpg"></p><p>可以看到还有很大的干扰存在。主要来自于相似的颜色，因此我们还需要进行进一步的处理。</p><h3 id="2-2基于canny算子的边缘轮廓提取"><a href="#2-2基于canny算子的边缘轮廓提取" class="headerlink" title="2.2基于canny算子的边缘轮廓提取"></a>2.2基于canny算子的边缘轮廓提取</h3><p> 目前我们仅获得了行道线区域，为了后续能够方便的计算行道线角度，我们需要得到行道线具体的轮廓&#x2F;线段信息，即从区域中提取出线段。这里我们使用Canny算法实现。</p><p>Canny边缘检测是从不同视觉对象中提取有用的结构信息并大大减少要处理的数据量的一种技术，于1986年被提出，目前已广泛应用于各种计算机视觉系统。</p><p>Canny算法具体包括5个步骤：</p><ol><li><pre><code>   使用高斯滤波器，以平滑图像，滤除噪声。</code></pre></li><li><pre><code>   计算图像中每个像素点的梯度强度和方向。</code></pre></li><li><pre><code>   应用非极大值（Non-Maximum Suppression）抑制，以消除边缘检测带来的杂散响应。</code></pre></li><li><pre><code>   应用双阈值（Double-Threshold）检测来确定真实的和潜在的边缘。</code></pre></li><li><pre><code>   通过抑制孤立的弱边缘最终完成边缘检测。</code></pre></li></ol><p>具体实现细节我们不再详细剖析，在OpenCV中集成了canny算法，只需要一行代码即可实现canny边缘检测。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 黄色线边缘提取</span></span><br><span class="line">yellow_edge = cv2.Canny(yellow_mask, <span class="number">200</span>, <span class="number">400</span>)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;yellow_edge.jpg&#x27;</span>, yellow_edge)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 白色线边缘提取white</span></span><br><span class="line">white_edge = cv2.Canny(white_mask, <span class="number">200</span>, <span class="number">400</span>)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;white_edge.jpg&#x27;</span>, white_edge)</span><br></pre></td></tr></table></figure><p>有兴趣了解canny的同学可以查看<a href="https://blog.csdn.net/sodaANDcola/article/details/119821939">这篇博客</a> ,其中运用到的正态分布、偏导、梯度与极限的知识我们都学过，可以理解。高斯核滤波也用于卷积，而实际上的卷积还会复杂一点，可以自行了解。在后面的pytorch版本我会详细解释运行原理。</p><p> 代码中200和400这两个参数表示canny算子的低、高阈值，按照opencv教程一般可以不用修改。 </p><p> 最终效果： </p><p><img src="/.com//white_edge.jpg"></p><p><img src="/.com//yellow_edge.jpg"></p><h3 id="2-3感兴趣区域-ROI-定位"><a href="#2-3感兴趣区域-ROI-定位" class="headerlink" title="2.3感兴趣区域(ROI)定位"></a>2.3感兴趣区域(ROI)定位</h3><p>在利用OpenCV对图像进行处理时，通常会遇到一个情况，就是只需要对部分感兴趣区域（Region Of Interest, ROI）进行处理。例如针对我们这个模拟平台上的智能小车任务来说，对于黄色行道线，我们只关注图像右下部分，而对于白色行道线，我们只关注图像左下部分即可。至于图像其他部分因为我们通过人工分析知道，这些区域我们并不需要处理。因此，我们只用提取图像的对应区域。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">region_of_interest</span>(<span class="params">edges, color=<span class="string">&#x27;yellow&#x27;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    感兴趣区域提取</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    height, width, _ = edges.shape</span><br><span class="line">    mask = np.zeros_like(edges)</span><br><span class="line">    <span class="comment"># 定义感兴趣区域掩码轮廓</span></span><br><span class="line">    <span class="keyword">if</span> color == <span class="string">&#x27;yellow&#x27;</span>:</span><br><span class="line">        polygon = np.array([[(width * <span class="number">1</span> / <span class="number">2</span>, height * <span class="number">1</span> / <span class="number">2</span>),</span><br><span class="line">                                (width, height * <span class="number">1</span> / <span class="number">2</span>),</span><br><span class="line">                                (width, height),</span><br><span class="line">                                (width * <span class="number">1</span> / <span class="number">2</span>, height)]], np.int32)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        polygon = np.array([[(<span class="number">0</span>, height * <span class="number">1</span> / <span class="number">2</span>),</span><br><span class="line">                             (width * <span class="number">1</span> / <span class="number">2</span>, height * <span class="number">1</span> / <span class="number">2</span>),</span><br><span class="line">                             (width * <span class="number">1</span> / <span class="number">2</span>, height),</span><br><span class="line">                             (<span class="number">0</span>, height)]], np.int32)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充感兴趣区域掩码</span></span><br><span class="line">    cv2.fillPoly(mask, polygon, (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">    <span class="comment"># 提取感兴趣区域</span></span><br><span class="line">    croped_edge = cv2.bitwise_and(edges, mask)</span><br><span class="line">    <span class="keyword">return</span> croped_edge</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    yimg = cv2.imread(<span class="string">&#x27;yellow_edge.jpg&#x27;</span>)</span><br><span class="line">    wimg = cv2.imread(<span class="string">&#x27;white_edge.jpg&#x27;</span>)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;white_edge_new.jpg&#x27;</span>, region_of_interest(wimg, <span class="string">&#x27;white&#x27;</span>))</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;yellow_edge_new.jpg&#x27;</span>, region_of_interest(yimg))</span><br></pre></td></tr></table></figure><p>这里定义感兴趣区域、填充感兴趣区域是使用了暴力的直接定位法，按住ctrl+函数名可以进入cv2.fillPoly查看函数的参数与具体作用。在实际应用中我们还有一些更加高级的方法来锁定感兴趣区域，但对于模拟器而言这种方法已经够用。注意这一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    感兴趣区域提取</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    height, width, _ = edges.shape</span><br><span class="line">    mask = np.zeros_like(edges)</span><br></pre></td></tr></table></figure><p>edges.shape返回有三个参数，分别为高度、宽度、通道数，如rgb图像就是三通道的。但是下面我们用不到通道数的值，但解包赋值需要把返回值全部接受，因此此处用_ 暂时存放通道数。</p><p>对于如何填充矩形有兴趣的同学，可以查看<a href="https://blog.csdn.net/weixin_43525427/article/details/105317567">这篇博客</a> 。这里进行部分的转载。</p><p>一、fillConvexPoly( )函数<br>以填充矩形为例<br>我图中想填充以1、2、3、4为顶点的矩形，我就要按1、2、3、4的顺序给出坐标序列array，或者是连贯的相邻顶点顺序（比如1432，4321…）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rectangular = np.array([ [<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">740</span>], [<span class="number">4032</span>,<span class="number">740</span>], [<span class="number">4032</span>,<span class="number">0</span>] ])</span><br><span class="line">cv2.fillConvexPoly(img_gray, rectangular, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p> 效果如下图所示<img src="/.com//20200404212500502.png" alt="在这里插入图片描述"> </p><p>那如果不按邻边顺序，如果我写成1423会如何呢？来看。</p><p> <img src="/.com//20200404213614360.png" alt="在这里插入图片描述"> </p><p>emmm， 我觉得想画五角星的画可以这样。</p><p>二、fillPoly( )函数<br>好了，上面都是基本操作，看看官方教程都可以。<br>我们玩点别的。<br>我如果想把一个矩形区域留住（拿车牌举例），剩下的填充为白色应该怎么办呢？<br>举一反三一下，两种办法：<br>（1）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.fillPoly(img_gray, [rec1, rec2, rec3, rec4], (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br></pre></td></tr></table></figure><p>四个矩形，改用fillPoly（）方法。</p><p> <img src="/.com//20200404221502411.png" alt="在这里插入图片描述"> </p><p>结果如上图。</p><p>（2）非要死脑筋其实用fillConvexPoly( )也不是不可以。</p><p> <img src="/.com//2020040422244385.png" alt="在这里插入图片描述"> </p><p>画个示意图，你们懂我意思吧。</p><p>定位后，我们的图片如下所示，可以看到更加“整洁”了。</p><p><img src="/.com//white_edge_new.jpg"></p><p><img src="/.com//yellow_edge_new.jpg"></p><p>###2.4基于霍夫变换的线段检测</p><p>到目前，我们抽取出了比较精确的行道线轮廓，但是对于实际的自动驾驶任务来说还没有完成目标任务要求，我们要对行道线轮廓再进一步处理，得到行道线的具体线段信息（每条线段的起始点坐标）。本小节我们使用霍夫变换来完成这个任务。霍夫变换，英文名称Hough Transform，作用是用来检测图像中的直线或者圆等几何图形的。</p><p>具体的，一条直线的表示方法有好多种，最常见的是y&#x3D;mx+b的形式。结合我们这个任务，对于最终检测出的感兴趣区域，怎么把图片中的直线提取出来。基本的思考流程是：如果直线 y&#x3D;mx+b 在图片中，那么图片中，必需有N多点在直线上（像素点代入表达式成立），只要有这条直线上的两个点，就能确定这条直线。该问题可以转换为：求解所有的(m,b)组合。<strong>【以下是部分原理，不感兴趣的同学可以直接跳到代码】</strong></p><p>设置两个坐标系，左边的坐标系表示的是(x,y)值，右边的坐标系表达的是(m,b)的值，即直线的参数值。那么一个(x,y)点在右边对应的就是一条线，左边坐标系的一条直线就是右边坐标系中的一个点。这样，右边左边系中的交点就表示有多个点经过(k,b)确定的直线。但是，该方法存在一个问题，(m,b)的取值范围太大。</p><p> <img src="/.com//a3c0d9612c82496cbd1bdaa987971f1c.png" alt="img"> </p><p>为了解决(m,b)取值范围过大的问题，在直线的表示方面用 <em>xcosθ+ysinθ&#x3D;r</em> 的规范式代替一般表达式，参数空间变成(θ,r)，0&#x3D;&lt;θ&lt;&#x3D;2PI。这样图像空间中的一个像素点在参数空间中就是一条曲线（三角函数曲线）。</p><p> <img src="/.com//2238243e98dd8ea95315fa27848f801f.png" alt="image-20220321140942980"> </p><p> 此时，图像空间和参数空间的对应关系如下： </p><p> <img src="/.com//20200211011825716.jpg" alt="img"> </p><p>从图中可以看出，霍夫直线检测即为在参数空间中对r和theta投票的过程，得票最高者为最终的直线参数。  theta表示与直线垂直的线与x轴的夹角，那么他的取值范围就是-pi到pi ，但显然取0-pi就可以表示所有直线。</p><p>更详细的数学原理请查看<a href="https://blog.csdn.net/u013066730/article/details/123086027">这篇博客</a> ，其中涉及到笛卡尔坐标向极坐标变换(事实上是一个特殊的参数空间)的讨论，对数学感兴趣的同学可以深入了解，这里不再展示。走到这一步，流程图如下所示。</p><p>霍夫线段检测算法原理步骤如下：</p><ul><li>初始化(θ,r)空间，N(θ,r)&#x3D;0 。（N(θ,r)表示在该参数表示的直线上的像素点的个数）</li><li>对于每一个像素点(x,y)，在参数空间中找出令 xcosθ+ysinθ&#x3D;r 的(θ,r)坐标，N(θ,r)+&#x3D;1</li><li>统计所有N(θ,r)的大小，取出N(θ,r)&gt;threasold的参数 。（threadsold是预设的阈值）</li></ul><p> OpenCV中封装好了基于霍夫变换的直线检测方法HoughLinesP，下面我们就来使用它进行线段检测。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">detect_line</span>(<span class="params">edges</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    基于霍夫变换的直线检测</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    rho = <span class="number">1</span>  <span class="comment"># 距离精度：1像素</span></span><br><span class="line">    angle = np.pi / <span class="number">180</span>  <span class="comment">#角度精度：1度</span></span><br><span class="line">    min_thr = <span class="number">10</span>  <span class="comment">#最少投票数</span></span><br><span class="line">    lines = cv2.HoughLinesP(edges,</span><br><span class="line">                            rho,</span><br><span class="line">                            angle,</span><br><span class="line">                            min_thr,</span><br><span class="line">                            np.array([]),</span><br><span class="line">                            minLineLength=<span class="number">8</span>,</span><br><span class="line">                            maxLineGap=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> lines</span><br></pre></td></tr></table></figure><p>我们可以print一下lines，结果如下(此处仅作展示，后面有这一步的完整代码)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[[[  1  94  47  62]]</span><br><span class="line"> [[143  94 156 103]]</span><br><span class="line"> [[103  67 119  77]]</span><br><span class="line"> [[  1  86  41  60]]</span><br><span class="line"> [[101  52 158  56]]</span><br><span class="line"> [[104  69 159 100]]</span><br><span class="line"> [[  5  52  22  53]]</span><br><span class="line"> [[129  63 140  63]]</span><br><span class="line"> [[ 87  50 110  52]]</span><br><span class="line"> [[  0  88  17  77]]</span><br><span class="line"> [[ 88  55 134  89]]</span><br><span class="line"> [[  2  94  36  70]]</span><br><span class="line"> [[ 17  50  29  50]]</span><br><span class="line"> [[ 23  73  42  60]]</span><br><span class="line"> [[ 90  56 110  70]]</span><br><span class="line"> [[  1  56  16  51]]</span><br><span class="line"> [[128  55 148  56]]</span><br><span class="line"> [[  0  89   8  84]]</span><br><span class="line"> [[ 88  56 112  75]]</span><br><span class="line"> [[151 101 159 104]]</span><br><span class="line"> [[ 30  73  43  61]]]</span><br></pre></td></tr></table></figure><p>返回的每组值都是一条线段表示线段起始位置(x_start,y_start,x_end,y_end)。可以看到小线段很多，我们对这些小线段做一下聚类和平均： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">average_lines</span>(<span class="params">frame, lines, direction=<span class="string">&#x27;left&#x27;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    小线段聚类</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    lane_lines = []</span><br><span class="line">    <span class="keyword">if</span> lines <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(direction + <span class="string">&#x27;没有检测到线段&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> lane_lines</span><br><span class="line">    height, width, _ = frame.shape</span><br><span class="line">    fits = []</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">for</span> x1, y1, x2, y2 <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">if</span> x1 == x2:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 计算拟合直线</span></span><br><span class="line">            fit = np.polyfit((x1, x2), (y1, y2), <span class="number">1</span>)</span><br><span class="line">            slope = fit[<span class="number">0</span>]</span><br><span class="line">            intercept = fit[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> direction == <span class="string">&#x27;left&#x27;</span> <span class="keyword">and</span> slope &lt; <span class="number">0</span>:</span><br><span class="line">                fits.append((slope, intercept))</span><br><span class="line">            <span class="keyword">elif</span> direction == <span class="string">&#x27;right&#x27;</span> <span class="keyword">and</span> slope &gt; <span class="number">0</span>:</span><br><span class="line">                fits.append((slope, intercept))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(fits) &gt; <span class="number">0</span>:</span><br><span class="line">        fit_average = np.average(fits, axis=<span class="number">0</span>)</span><br><span class="line">        lane_lines.append(make_points(frame, fit_average))</span><br><span class="line">    <span class="keyword">return</span> lane_lines</span><br></pre></td></tr></table></figure><p>这里需要注意，由于图像的y坐标跟我们数学上经常遇到的y坐标方向是相反的（图像的y坐标轴正向是朝下的），因此，左侧黄色实线斜率是负值，右侧白色实线斜率是正值。上述代码我们将所有小线段的斜率和截距进行了平均，并且使用make_points函数重新计算了该平均线对应到图像上的起始坐标位置，make_points函数如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_points</span>(<span class="params">frame, line</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    根据直线斜率和截距计算线段起始坐标</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    height, width, _ = frame.shape</span><br><span class="line">    slope, intercept = line</span><br><span class="line">    y1 = height</span><br><span class="line">    y2 = <span class="built_in">int</span>(y1 * <span class="number">1</span> / <span class="number">2</span>)</span><br><span class="line">    x1 = <span class="built_in">max</span>(-width, <span class="built_in">min</span>(<span class="number">2</span> * width, <span class="built_in">int</span>((y1 - intercept) / slope)))</span><br><span class="line">    x2 = <span class="built_in">max</span>(-width, <span class="built_in">min</span>(<span class="number">2</span> * width, <span class="built_in">int</span>((y2 - intercept) / slope)))</span><br><span class="line">    <span class="keyword">return</span> [[x1, y1, x2, y2]]</span><br></pre></td></tr></table></figure><p>上述函数最后返回的是坐标数值，这样看线段的坐标值不是很直观，我们可以写个脚本显式的观察这些线段： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">display_line</span>(<span class="params">frame, lines, line_color=(<span class="params"><span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span></span>), line_width=<span class="number">2</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    在原图上展示线段</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    line_img = np.zeros_like(frame)</span><br><span class="line">    <span class="keyword">if</span> lines <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="keyword">for</span> x1, y1, x2, y2 <span class="keyword">in</span> line:</span><br><span class="line">                cv2.line(line_img, (x1, y1), (x2, y2), line_color, line_width)</span><br><span class="line">    line_img = cv2.addWeighted(frame, <span class="number">0.8</span>, line_img, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> line_img</span><br></pre></td></tr></table></figure><p>上述代码我们将行道线按照一定权重与原图进行合成，方便我们查看最终效果。 </p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_line</span>(<span class="params">edges</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    基于霍夫变换的直线检测</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    rho = <span class="number">1</span>  <span class="comment"># 距离精度：1像素</span></span><br><span class="line">    angle = np.pi / <span class="number">180</span>  <span class="comment"># 角度精度：1度</span></span><br><span class="line">    min_thr = <span class="number">10</span>  <span class="comment"># 最少投票数</span></span><br><span class="line">    lines = cv2.HoughLinesP(edges,rho, angle,min_thr,np.array([]),minLineLength=<span class="number">8</span>,maxLineGap=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> lines</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">average_lines</span>(<span class="params">frame, lines, direction=<span class="string">&#x27;left&#x27;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    小线段聚类</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    lane_lines = []</span><br><span class="line">    <span class="keyword">if</span> lines <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(direction + <span class="string">&#x27;没有检测到线段&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> lane_lines</span><br><span class="line">    <span class="comment">#height, width , _= frame.shape</span></span><br><span class="line">    fits = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">for</span> x1, y1, x2, y2 <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">if</span> x1 == x2:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 计算拟合直线</span></span><br><span class="line">            fit = np.polyfit((x1, x2), (y1, y2), <span class="number">1</span>)</span><br><span class="line">            slope = fit[<span class="number">0</span>]</span><br><span class="line">            intercept = fit[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> direction == <span class="string">&#x27;left&#x27;</span> <span class="keyword">and</span> slope &lt; <span class="number">0</span>:</span><br><span class="line">                fits.append((slope, intercept))</span><br><span class="line">            <span class="keyword">elif</span> direction == <span class="string">&#x27;right&#x27;</span> <span class="keyword">and</span> slope &gt; <span class="number">0</span>:</span><br><span class="line">                fits.append((slope, intercept))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(fits) &gt; <span class="number">0</span>:</span><br><span class="line">        fit_average = np.average(fits, axis=<span class="number">0</span>)</span><br><span class="line">        lane_lines.append(make_points(frame, fit_average))</span><br><span class="line">    <span class="keyword">return</span> lane_lines</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_points</span>(<span class="params">frame, line</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    根据直线斜率和截距计算线段起始坐标</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    height, width= frame.shape</span><br><span class="line">    slope, intercept = line</span><br><span class="line">    y1 = height</span><br><span class="line">    y2 = <span class="built_in">int</span>(y1 * <span class="number">1</span> / <span class="number">2</span>)</span><br><span class="line">    x1 = <span class="built_in">max</span>(-width, <span class="built_in">min</span>(<span class="number">2</span> * width, <span class="built_in">int</span>((y1 - intercept) / slope)))</span><br><span class="line">    x2 = <span class="built_in">max</span>(-width, <span class="built_in">min</span>(<span class="number">2</span> * width, <span class="built_in">int</span>((y2 - intercept) / slope)))</span><br><span class="line">    <span class="keyword">return</span> [[x1, y1, x2, y2]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display_line</span>(<span class="params">frame, lines, line_color=(<span class="params"><span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span></span>), line_width=<span class="number">2</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    在原图上展示线段</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    line_img = np.zeros_like(frame)</span><br><span class="line">    <span class="keyword">if</span> lines <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="keyword">for</span> x1, y1, x2, y2 <span class="keyword">in</span> line:</span><br><span class="line">                cv2.line(line_img, (x1, y1), (x2, y2), line_color, line_width)</span><br><span class="line">    line_img = cv2.addWeighted(frame, <span class="number">0.8</span>, line_img, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> line_img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    yimg = cv2.imread(<span class="string">&#x27;yellow_edge_new.jpg&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">    wimg = cv2.imread(<span class="string">&#x27;white_edge_new.jpg&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#霍夫变换</span></span><br><span class="line">    yimg_detect_line = detect_line(yimg)</span><br><span class="line">    wimg_detect_line = detect_line(wimg)</span><br><span class="line">    <span class="comment">#小线段聚类</span></span><br><span class="line">    yimg_average_lines = average_lines(yimg,yimg_detect_line,direction=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">    wimg_average_lines = average_lines(wimg,wimg_detect_line)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#在原图上展示线段</span></span><br><span class="line">    y=cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line">    w=cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line">    yellow_display_line = display_line(y, yimg_average_lines)</span><br><span class="line">    white_display_line = display_line(w, wimg_average_lines)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;yellow_display_line.jpg&#x27;</span>, yellow_display_line)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;white_display_line.jpg&#x27;</span>, white_display_line)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#函数入口</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>我们来分析一下几段容易出错的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(fits) &gt; <span class="number">0</span>:</span><br><span class="line">        fit_average = np.average(fits, axis=<span class="number">0</span>)</span><br><span class="line">        lane_lines.append(make_points(frame, fit_average))</span><br></pre></td></tr></table></figure><p>注意此处已经嵌套调用了make_points函数，返回了图片的x，y坐标。后续不需要再进行make_points，否则将会出现传入参数错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    yimg = cv2.imread(<span class="string">&#x27;yellow_edge_new.jpg&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">    wimg = cv2.imread(<span class="string">&#x27;white_edge_new.jpg&#x27;</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这里imread后面多带一个参数0，表示以单通道读入。即使图像显示为黑白，它仍然可能是三通道的，而yimg_detect_line中HoughLinesP霍夫变换只接受单通道的图片。这里不加0这个参数将会出现错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">display_line</span>(<span class="params">frame, lines, line_color=(<span class="params"><span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span></span>), line_width=<span class="number">2</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    在原图上展示线段</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>注意line_color传入的rgb三色值是倒过来的，实际上红色对应的是(255，0，0)，而(0， 0， 255)是紫蓝色(?)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">height, width= frame.shape</span><br></pre></td></tr></table></figure><p>某些.shape返回的是三个参数，第三个表示的是通道数。一般用_ 来接收这个不需要用到的通道数，而此处不会返回这个值，所以加入_ 会出错。实际应该根据编译器的提示进行修改(因为我也没摸透为什么，可能图片经过其他函数的一些转换后，不会返回这个参数。实际上修改起来也比较简单。)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在原图上展示线段</span></span><br><span class="line">    y=cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line">    w=cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line">    yellow_display_line = display_line(y, yimg_average_lines)</span><br><span class="line">    white_display_line = display_line(w, wimg_average_lines)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;yellow_display_line.jpg&#x27;</span>, yellow_display_line)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;white_display_line.jpg&#x27;</span>, white_display_line)</span><br></pre></td></tr></table></figure><p>这里读入我们拍摄的彩色图片，将红色的线段合成上去。整体代码运行结果如下：</p><p><img src="/.com//white_display_line.jpg"></p><p><img src="/.com//yellow_display_line.jpg"></p><p> 从效果上看我们准确的将两条行道线检测了出来。接下来就是根据这两条行道线进行自动驾驶方向控制。 </p><h3 id="2-5动作控制：转向角"><a href="#2-5动作控制：转向角" class="headerlink" title="2.5动作控制：转向角"></a>2.5动作控制：转向角</h3><p>针对前面的测试图片，我们可以有效的检测出两条行道线（左侧黄色线和右侧白色线），但是在真实的运行过程中，可能会出现3种情况：</p><p>(1)正常检测到2条行道线：这种情况一般是直线车道且车辆稳定运行在行道线内，这时候我们只需要根据检测出的两条行道线微调整角度即可。</p><p>(2)检测出1条行道线：这种情况在转弯处容易出现，或者在车辆开始大范围偏离时出现，这时候我们的策略应该是向能够检测到的这条行道线方向前进。</p><p>(3)检测不到行道线：这种情况应该停下小车。</p><p>因此，针对三种情况我们需要不同的处理方式。代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算转向角</span></span><br><span class="line">x_offset = <span class="number">0</span></span><br><span class="line">y_offset = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(yellow_lane)&gt;<span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(white_lane)&gt;<span class="number">0</span>:  <span class="comment"># 检测到2条线</span></span><br><span class="line">    _, _, left_x2, _ = yellow_lane[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    _, _, right_x2, _ = white_lane[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    mid = <span class="built_in">int</span>(width / <span class="number">2</span>)</span><br><span class="line">    x_offset = (left_x2 + right_x2) / <span class="number">2</span> - mid</span><br><span class="line">    y_offset = <span class="built_in">int</span>(height / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">len</span>(yellow_lane)&gt;<span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(yellow_lane[<span class="number">0</span>])==<span class="number">1</span>:  <span class="comment"># 只检测到黄色行道线</span></span><br><span class="line">    x1, _, x2, _ = yellow_lane[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    x_offset = x2 - x1</span><br><span class="line">    y_offset = <span class="built_in">int</span>(height / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">len</span>(white_lane)&gt;<span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(white_lane[<span class="number">0</span>])==<span class="number">1</span>:  <span class="comment"># 只检测到白色行道线</span></span><br><span class="line">    x1, _, x2, _ = white_lane[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    x_offset = x2 - x1</span><br><span class="line">    y_offset = <span class="built_in">int</span>(height / <span class="number">2</span>)</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># 一条线都没检测到</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;检测不到行道线，退出程序&#x27;</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">angle_to_mid_radian = math.atan(x_offset / y_offset)  </span><br><span class="line">angle_to_mid_deg = <span class="built_in">int</span>(angle_to_mid_radian * <span class="number">180.0</span> / math.pi) </span><br><span class="line">steering_angle = angle_to_mid_deg/<span class="number">45.0</span></span><br><span class="line">action = np.array([steering_angle, <span class="number">0.3</span>])  <span class="comment"># 油门值恒定</span></span><br></pre></td></tr></table></figure><p> 到这里我们就可以开始启动程序了。完整代码如下所示： </p><p>先编写自定义库tools：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_line</span>(<span class="params">edges</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    基于霍夫变换的直线检测</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    rho = <span class="number">1</span>  <span class="comment"># 距离精度：1像素</span></span><br><span class="line">    angle = np.pi / <span class="number">180</span>  <span class="comment"># 角度精度：1度</span></span><br><span class="line">    min_thr = <span class="number">10</span>  <span class="comment"># 最少投票数</span></span><br><span class="line">    lines = cv2.HoughLinesP(edges,rho, angle,min_thr,np.array([]),minLineLength=<span class="number">8</span>,maxLineGap=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> lines</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">average_lines</span>(<span class="params">frame, lines, direction=<span class="string">&#x27;left&#x27;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    小线段聚类</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    lane_lines = []</span><br><span class="line">    <span class="keyword">if</span> lines <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(direction + <span class="string">&#x27;没有检测到线段&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> lane_lines</span><br><span class="line">    <span class="comment">#height, width , _= frame.shape</span></span><br><span class="line">    fits = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">for</span> x1, y1, x2, y2 <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">if</span> x1 == x2:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 计算拟合直线</span></span><br><span class="line">            fit = np.polyfit((x1, x2), (y1, y2), <span class="number">1</span>)</span><br><span class="line">            slope = fit[<span class="number">0</span>]</span><br><span class="line">            intercept = fit[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> direction == <span class="string">&#x27;left&#x27;</span> <span class="keyword">and</span> slope &lt; <span class="number">0</span>:</span><br><span class="line">                fits.append((slope, intercept))</span><br><span class="line">            <span class="keyword">elif</span> direction == <span class="string">&#x27;right&#x27;</span> <span class="keyword">and</span> slope &gt; <span class="number">0</span>:</span><br><span class="line">                fits.append((slope, intercept))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(fits) &gt; <span class="number">0</span>:</span><br><span class="line">        fit_average = np.average(fits, axis=<span class="number">0</span>)</span><br><span class="line">        lane_lines.append(make_points(frame, fit_average))</span><br><span class="line">    <span class="keyword">return</span> lane_lines</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_points</span>(<span class="params">frame, line</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    根据直线斜率和截距计算线段起始坐标</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    height, width, _ = frame.shape</span><br><span class="line">    slope, intercept = line</span><br><span class="line">    y1 = height</span><br><span class="line">    y2 = <span class="built_in">int</span>(y1 * <span class="number">1</span> / <span class="number">2</span>)</span><br><span class="line">    x1 = <span class="built_in">max</span>(-width, <span class="built_in">min</span>(<span class="number">2</span> * width, <span class="built_in">int</span>((y1 - intercept) / slope)))</span><br><span class="line">    x2 = <span class="built_in">max</span>(-width, <span class="built_in">min</span>(<span class="number">2</span> * width, <span class="built_in">int</span>((y2 - intercept) / slope)))</span><br><span class="line">    <span class="keyword">return</span> [[x1, y1, x2, y2]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display_line</span>(<span class="params">frame, lines, line_color=(<span class="params"><span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span></span>), line_width=<span class="number">2</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    在原图上展示线段</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    line_img = np.zeros_like(frame)</span><br><span class="line">    <span class="keyword">if</span> lines <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="keyword">for</span> x1, y1, x2, y2 <span class="keyword">in</span> line:</span><br><span class="line">                cv2.line(line_img, (x1, y1), (x2, y2), line_color, line_width)</span><br><span class="line">    line_img = cv2.addWeighted(frame, <span class="number">0.8</span>, line_img, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> line_img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    yimg = cv2.imread(<span class="string">&#x27;yellow_edge_new.jpg&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">    wimg = cv2.imread(<span class="string">&#x27;white_edge_new.jpg&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="comment">#霍夫变换</span></span><br><span class="line">    yimg_detect_line = detect_line(yimg)</span><br><span class="line">    wimg_detect_line = detect_line(wimg)</span><br><span class="line">    <span class="comment">#小线段聚类</span></span><br><span class="line">    yimg_average_lines = average_lines(yimg,yimg_detect_line,direction=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">    wimg_average_lines = average_lines(wimg,wimg_detect_line)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#在原图上展示线段</span></span><br><span class="line">    y=cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line">    w=cv2.imread(<span class="string">&#x27;test.jpg&#x27;</span>)</span><br><span class="line">    yellow_display_line = display_line(y, yimg_average_lines)</span><br><span class="line">    white_display_line = display_line(w, wimg_average_lines)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;yellow_display_line.jpg&#x27;</span>, yellow_display_line)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;white_display_line.jpg&#x27;</span>, white_display_line)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">region_of_interest</span>(<span class="params">edges, color=<span class="string">&#x27;yellow&#x27;</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        感兴趣区域提取</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        height, width = edges.shape</span><br><span class="line">        mask = np.zeros_like(edges)</span><br><span class="line">        <span class="comment"># 定义感兴趣区域掩码轮廓</span></span><br><span class="line">        <span class="keyword">if</span> color == <span class="string">&#x27;yellow&#x27;</span>:</span><br><span class="line">            polygon = np.array([[(width * <span class="number">1</span> / <span class="number">2</span>, height * <span class="number">1</span> / <span class="number">2</span>),</span><br><span class="line">                                 (width, height * <span class="number">1</span> / <span class="number">2</span>),</span><br><span class="line">                                 (width, height),</span><br><span class="line">                                 (width * <span class="number">1</span> / <span class="number">2</span>, height)]], np.int32)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            polygon = np.array([[(<span class="number">0</span>, height * <span class="number">1</span> / <span class="number">2</span>),</span><br><span class="line">                                 (width * <span class="number">1</span> / <span class="number">2</span>, height * <span class="number">1</span> / <span class="number">2</span>),</span><br><span class="line">                                 (width * <span class="number">1</span> / <span class="number">2</span>, height),</span><br><span class="line">                                 (<span class="number">0</span>, height)]], np.int32)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 填充感兴趣区域掩码</span></span><br><span class="line">        cv2.fillPoly(mask, polygon, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">        <span class="comment"># 提取感兴趣区域</span></span><br><span class="line">        croped_edge = cv2.bitwise_and(edges, mask)</span><br><span class="line">        <span class="keyword">return</span> croped_edge</span><br></pre></td></tr></table></figure><p>再编写主函数入口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入系统库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> gym_donkeycar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入自定义库</span></span><br><span class="line"><span class="keyword">from</span> tools <span class="keyword">import</span> region_of_interest, detect_line, make_points, average_lines, display_line</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    主函数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 设置模拟器环境</span></span><br><span class="line">    env = gym.make(<span class="string">&quot;donkey-generated-roads-v0&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重置当前场景</span></span><br><span class="line">    obv = env.reset()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始启动</span></span><br><span class="line">    action = np.array([<span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># 动作控制，第1个转向值，第2个油门值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行动作</span></span><br><span class="line">    obv, reward, done, info = env.step(action)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取图像</span></span><br><span class="line">    frame = cv2.cvtColor(obv, cv2.COLOR_RGB2BGR)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行1000次动作</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="comment"># 转换图像到HSV空间</span></span><br><span class="line">        height, width, _ = frame.shape</span><br><span class="line">        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 黄色区域检测</span></span><br><span class="line">        lower_blue = np.array([<span class="number">15</span>, <span class="number">40</span>, <span class="number">40</span>])</span><br><span class="line">        upper_blue = np.array([<span class="number">45</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">        yellow_mask = cv2.inRange(hsv, lower_blue, upper_blue)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 白色区域检测</span></span><br><span class="line">        lower_blue = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>])</span><br><span class="line">        upper_blue = np.array([<span class="number">180</span>, <span class="number">30</span>, <span class="number">255</span>])</span><br><span class="line">        white_mask = cv2.inRange(hsv, lower_blue, upper_blue)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 黄色线边缘提取</span></span><br><span class="line">        yellow_edge = cv2.Canny(yellow_mask, <span class="number">200</span>, <span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 白色线边缘提取</span></span><br><span class="line">        white_edge = cv2.Canny(white_mask, <span class="number">200</span>, <span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 黄色线感兴趣区域提取</span></span><br><span class="line">        yellow_roi = region_of_interest(yellow_edge, color=<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 白色线感兴趣区域提取</span></span><br><span class="line">        white_roi = region_of_interest(white_edge, color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 黄色线段检测</span></span><br><span class="line">        yellow_lines = detect_line(yellow_roi)</span><br><span class="line">        yellow_lane = average_lines(frame, yellow_lines, direction=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">        <span class="comment"># yellow_show = display_line(frame, yellow_lane)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 白色线段检测</span></span><br><span class="line">        white_lines = detect_line(white_roi)</span><br><span class="line">        white_lane = average_lines(frame, white_lines, direction=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">        <span class="comment"># white_show = display_line(frame, white_lane, line_color=(255, 0, 0))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算转向角</span></span><br><span class="line">        x_offset = <span class="number">0</span></span><br><span class="line">        y_offset = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(yellow_lane) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(white_lane) &gt; <span class="number">0</span>:  <span class="comment"># 检测到2条线</span></span><br><span class="line">            _, _, left_x2, _ = yellow_lane[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            _, _, right_x2, _ = white_lane[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            mid = <span class="built_in">int</span>(width / <span class="number">2</span>)</span><br><span class="line">            x_offset = (left_x2 + right_x2) / <span class="number">2</span> - mid</span><br><span class="line">            y_offset = <span class="built_in">int</span>(height / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(yellow_lane) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(yellow_lane[<span class="number">0</span>]) == <span class="number">1</span>:  <span class="comment"># 只检测到黄色行道线</span></span><br><span class="line">            x1, _, x2, _ = yellow_lane[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            x_offset = x2 - x1</span><br><span class="line">            y_offset = <span class="built_in">int</span>(height / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(white_lane) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(white_lane[<span class="number">0</span>]) == <span class="number">1</span>:  <span class="comment"># 只检测到白色行道线</span></span><br><span class="line">            x1, _, x2, _ = white_lane[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            x_offset = x2 - x1</span><br><span class="line">            y_offset = <span class="built_in">int</span>(height / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 一条线都没检测到</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;检测不到行道线，退出程序&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        angle_to_mid_radian = math.atan(x_offset / y_offset)</span><br><span class="line">        angle_to_mid_deg = <span class="built_in">int</span>(angle_to_mid_radian * <span class="number">180.0</span> / math.pi)</span><br><span class="line">        steering_angle = angle_to_mid_deg / <span class="number">45.0</span></span><br><span class="line">        action = np.array([steering_angle, <span class="number">0.3</span>])  <span class="comment"># 油门值恒定</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 执行动作</span></span><br><span class="line">        obv, reward, done, info = env.step(action)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 重新获取图像</span></span><br><span class="line">        frame = cv2.cvtColor(obv, cv2.COLOR_RGB2BGR)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行完以后重置当前场景</span></span><br><span class="line">    obv = env.reset()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    主函数入口</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>别忘了要先启动模拟器噢！</p><p>到这里本节就已经接近尾声了。我对代码中的很多部分进行了修改，使它适应新版的opencv与实际情况。每一部分都重新编写了完整的测试代码。<strong>跳到这里没看的同学至少把测试代码运行一下，尝试理解原理。</strong></p><p>注意：如果当前生成的赛道有“十字路口交叉”（每次重新进入赛道其生成的赛道都是随机绘制的），那么在运行的时候可能会出现失败、跑出赛道的现象。因为这种十字路口我们在程序中没有考虑。如何规避这个问题，有兴趣的同学可以自行研究。</p><p>本文更多的关注基于深度学习的图像处理技术，对于传统的图像处理算法（例如霍夫变换等）本文不再深入分析，同学们如果对这些传统图像处理算法不熟悉的可以自行再查阅资料深入研究，上面已经给出了不少资料的链接。</p><p>截止到目前为止，我们借助上面这个基于opencv的自动驾驶模拟平台，我们重新巩固了Python、opencv图像处理的基本使用方法，了解了自动驾驶项目的难点，对整个处理流程有了更进一步的认识。需要说明的是，尽管我们上述操作步骤是针对我们这个自动驾驶模拟平台的，但是以上步骤同样适用于很多其他图像处理任务，很多传统的图像处理任务都涵盖颜色空间变换、特定颜色物体提取、感兴趣区域过滤、霍夫变换等步骤，因此掌握上述常规的图像处理技术是非常重要的。</p><p>##3.基于深度学习的自动驾驶控制</p><p>在上一节中我们通过OpenCV图像处理技术实现了一个简易的自动驾驶小车。但是很明显，这辆自动驾驶小车的适应性很差，当图像中有相同颜色的干扰物出现时，那么对于这辆自动驾驶的小车来说就是顶级灾难。另外，我们需要大量人工定义的参数，例如行道线颜色（黄色或白色）、颜色阈值、霍夫变换阈值等，而且一旦地图环境换了，所有这些参数我们都得重新手工调整，这些参数之间又有一定的耦合性，参数调整很麻烦。很显然，这种处理方法普适性不好。</p><p>那么能不能丢给机器一大堆图片，让机器自己去学习如何从当前图像中分析出小车应该转向的合适角度？如果没有接触过深度学习，那么乍一听这个想法简直是天方夜谭，然而深度学习确实做到了。这就是为什么近十年深度学习在图像处理领域取得了全面成功。深度学习能够从大量图像数据中自行学习高层次语义特征，完成媲美人类甚至超越人类的推理水平，整个学习过程不用人为干预，我们要做的就是“喂”一堆图片并且设定好需要优化的目标函数即可。当我们“喂”的图片越多、种类越丰富，那么最终机器学习到的驾驶水平越强，而且适应性越好。</p><p>本小节开始我们将正式进入基于深度学习的自动驾驶领域。</p><h3 id="3-0一些基础知识"><a href="#3-0一些基础知识" class="headerlink" title="3.0一些基础知识"></a>3.0一些基础知识</h3><p>根据后面要用到的网络，这里放上一些基础知识，篇幅都不(太)长，请同学们阅读。</p><p><a href="https://zhuanlan.zhihu.com/p/243050824">神经网络与深度学习</a> 这种基本的认识想必大家已经有了，但这里还是放一放。</p><p><a href="https://www.bilibili.com/video/BV1hE411t7RN?share_source=copy_web">pytorch基础教程</a> pytorch可以使用英伟达NVIDIA的产品进行GPU运算，但AMD锐龙的显卡并不支持。教程后期有教到如何使用。这是非常浅显易懂的课(用张老师的话来说就是傻瓜式的)，因此虽然我们主要用到的是pytorch但这里不进行教学。如果仍有困难，后面我会现场讲解或录视频，加上写文档的方式帮助同学们。</p><p><a href="https://blog.csdn.net/fanxin_i/article/details/80212906">bp神经网络原理</a> bp神经网络我在导论课上讲的那个就是，忘了的话可以去导论那个群下载对应的excel演示下来玩一下。对应的论文也是非常有趣，预训练现在的应用非常广泛，同学们可以阅读一下。</p><p><a href="https://zhuanlan.zhihu.com/p/47184529">卷积神经网络与池化、全连接、归一化</a></p><p><a href="https://zhuanlan.zhihu.com/p/112993440">全连接神经网络</a></p><p><a href="https://zhuanlan.zhihu.com/p/424518359">归一化</a></p><p><a href="https://www.zhihu.com/question/51435499">端到端是什么</a></p><p>同时建议大家复习一下我当时给大家讲python的时候说到的os库。</p><h3 id="3-1算法原理"><a href="#3-1算法原理" class="headerlink" title="3.1算法原理"></a>3.1算法原理</h3><p>本项目实现思路参考2016年英伟达发表的论文《End to End Learning for Self-Driving Cars》。这篇文章提出的方法核心思想就是使用神经网络自动提取图像特征，从传统的 image -&gt; features -&gt; action变成了image -&gt; action。该论文使用了深度网络结构，大大增强了图像特征提取能力，最终取得了不错的效果，其训练的模型不论是普通道路还是高速路，不论有道路标线还是没有道路标线都非常有效，解决了传统算法泛化性能差的问题。本文方法的测试性能非常好，在16年自动驾驶研究火热时，是一篇影响力很大的文章，即使放到现在，也是作为自动驾驶入门必读的Paper。</p><p>整个算法原理很简单，是对真实人类操作的一个模拟。对于我们人类驾驶员来说，假设我们正在驾驶这辆车，我们的执行流程跟上面算法也是一样的。首先我们用眼睛观看路面，然后我们的大脑根据当前眼睛看到的路面情况“下意识”的转动方向盘，转动一个我们认为合适的角度，从而避免车辆开出路面。这篇论文算法实现原理也是这样，具体如下图所示：</p><p><img src="/.com//桌面\基于深度学习的endtoend自动驾驶\essay1.png"></p><p>通过中间摄像头采集图像，然后图像输入到预先训练好的CNN网络，这个网络的输出是一个转向角度（可以理解为方向盘的转向角度），有了这个角度就可以控制小车按照这个角度进行转向。</p><p>有了这样一个模式，我们就只需要想办法训练这个CNN模型，针对每帧图像，都有一个我们认为合适的转向角度输出，即输入图像，输出一个回归值。具体模型结构如下图所示：<br><img src="/.com//桌面\基于深度学习的endtoend自动驾驶\essay2.png"></p><p>整个模型结构并不复杂，就是一堆的普通的CNN卷积神经网络模块按照顺序堆叠，最后使用全连接网络输出回归值。这个模型一共包含30层，由于其输入精度比较低(66x200)，因此推理速度也是比较快的，借助GPU可以实现实时推理。具体的，图像首先经过Normalization标准化，然后经过5组卷积层处理，最后拉平以后通过4个全连接层输出一个回归值，这个回归值就是我们项目中的转向角。</p><p>这里我们会遇到一个问题，训练上述深度神经网络我们需要大量的数据，即每帧图像以及对应的最佳转向值，这些数据怎么来呢？这篇论文里提出了一个方法，既然是模拟人类行为，那么只要让驾驶水平高超的“老司机”在相关赛道上进行手动驾驶，驾驶时一边记录每帧图像同时记录当前帧对应的操控的转向角，这样一组组数据记录下来就是我们认为的“最佳”训练数据。训练时，将模型预测的角度与给定图像帧的期望转向角度进行比较，误差通过反向传播反馈到CNN训练过程中，如下图所示。从图可以看出，这个过程在一个循环中重复，直到误差（本例中使用均方误差）足够低，这意味着模型已经学会了如何合理地转向。事实上，这是一个非常典型的图像分类训练过程，只不过这里预测输出是数值（回归值）而不是对象类别（分类概率）。<br> 可以想象，如果能够完全的训练好这个模型，那么最终模型的输出结果是非常接近人类驾驶经验的。这篇论文通过大量实验证明，上述模型能够直接从拍摄的路面图像中有效的学习到最终的转向角，省去了传统算法颜色区域检测、感兴趣区域选择、霍夫变换等一系列复杂的耦合步骤。这篇论文做了一组实验，通过收集不到一百小时的少量训练数据进行训练，最后得到的模型足以支持在各种条件下操控车辆，比如高速公路、普通公路和居民区道路，以及晴天、多云和雨天等天气状况。</p><p>需要说明的是，这个模型的输出仅有一个转向角度，这样容易学习成功。如果输出变量再多一些（例如油门值、摄像头角度、行人避障等），那么这个模型还需要再进一步优化，感兴趣的同学可以借鉴近两年的论文进行深入研究（而我们的项目就是要做这个）。<br>接下来我们就按照这个算法流程进行实现。</p><p>###3.2数据采集</p><p>针对我们采用的自动驾驶模拟平台，为了能够采集到每帧图像及对应的最佳转向角度，我们可以使用前面第2节方法编写控制代码通过键盘控制小车（低匀速运行，仅仅只需要控制转向角度），然后记录每帧数据即可。这种模式是真实自动驾驶使用的，但是需要我们自己把自己练成经验充足的“老司机”，然后再去教会算法怎么驾驶。这样比较麻烦，这里可以有一种“偷懒”的办法。我们使用前面调参调的不错的OpenCV自动驾驶版本，使用OpenCV算法自动驾驶，然后记录每帧图像及对应角度。尽管这个OpenCV自动驾驶水平本身也一般（没有一直控制在两条行道线的绝对正中间），但是胜在能够基本稳定在行道线内。本文只是一个自动驾驶入门项目，可以采用这样的方法收集数据，来快速验证深度学习自动驾驶可行性。真实项目的话还是需要向“老司机”学习的。</p><p>先定义自定义tools库，这里对上面的进行了一定的修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">region_of_interest</span>(<span class="params">edges, color=<span class="string">&#x27;yellow&#x27;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    感兴趣区域提取</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    height, width = edges.shape</span><br><span class="line">    mask = np.zeros_like(edges)</span><br><span class="line">    <span class="comment"># 定义感兴趣区域掩码轮廓</span></span><br><span class="line">    <span class="keyword">if</span> color == <span class="string">&#x27;yellow&#x27;</span>:</span><br><span class="line">        polygon = np.array([[(<span class="number">0</span>, height * <span class="number">1</span> / <span class="number">2</span>),</span><br><span class="line">                             (width * <span class="number">1</span> / <span class="number">2</span>, height * <span class="number">1</span> / <span class="number">2</span>),</span><br><span class="line">                             (width * <span class="number">1</span> / <span class="number">2</span>, height),</span><br><span class="line">                             (<span class="number">0</span>, height)]], np.int32)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        polygon = np.array([[(width * <span class="number">1</span> / <span class="number">2</span>, height * <span class="number">1</span> / <span class="number">2</span>),</span><br><span class="line">                             (width, height * <span class="number">1</span> / <span class="number">2</span>),</span><br><span class="line">                             (width, height),</span><br><span class="line">                             (width * <span class="number">1</span> / <span class="number">2</span>, height)]], np.int32)</span><br><span class="line">    <span class="comment"># 填充感兴趣区域掩码</span></span><br><span class="line">    cv2.fillPoly(mask, polygon, <span class="number">255</span>)</span><br><span class="line">    <span class="comment"># 提取感兴趣区域</span></span><br><span class="line">    croped_edge = cv2.bitwise_and(edges, mask)</span><br><span class="line">    <span class="keyword">return</span> croped_edge</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_line</span>(<span class="params">edges</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    基于霍夫变换的直线检测</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    rho = <span class="number">1</span>  <span class="comment"># 距离精度：1像素</span></span><br><span class="line">    angle = np.pi / <span class="number">180</span>  <span class="comment">#角度精度：1度</span></span><br><span class="line">    min_thr = <span class="number">10</span>  <span class="comment">#最少投票数</span></span><br><span class="line">    lines = cv2.HoughLinesP(edges,</span><br><span class="line">                            rho,</span><br><span class="line">                            angle,</span><br><span class="line">                            min_thr,</span><br><span class="line">                            np.array([]),</span><br><span class="line">                            minLineLength=<span class="number">8</span>,</span><br><span class="line">                            maxLineGap=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">return</span> lines</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">average_lines</span>(<span class="params">frame, lines, direction=<span class="string">&#x27;left&#x27;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    小线段聚类</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    lane_lines = []</span><br><span class="line">    <span class="keyword">if</span> lines <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(direction + <span class="string">&#x27;没有检测到线段&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> lane_lines</span><br><span class="line">    height, width, _ = frame.shape</span><br><span class="line">    fits = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">for</span> x1, y1, x2, y2 <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">if</span> x1 == x2:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 计算拟合直线</span></span><br><span class="line">            fit = np.polyfit((x1, x2), (y1, y2), <span class="number">1</span>)</span><br><span class="line">            slope = fit[<span class="number">0</span>]</span><br><span class="line">            intercept = fit[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> direction == <span class="string">&#x27;left&#x27;</span> <span class="keyword">and</span> slope &lt; <span class="number">0</span>:</span><br><span class="line">                fits.append((slope, intercept))</span><br><span class="line">            <span class="keyword">elif</span> direction == <span class="string">&#x27;right&#x27;</span> <span class="keyword">and</span> slope &gt; <span class="number">0</span>:</span><br><span class="line">                fits.append((slope, intercept))</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(fits) &gt; <span class="number">0</span>:</span><br><span class="line">        fit_average = np.average(fits, axis=<span class="number">0</span>)</span><br><span class="line">        lane_lines.append(make_points(frame, fit_average))</span><br><span class="line">    <span class="keyword">return</span> lane_lines</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_points</span>(<span class="params">frame, line</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    根据直线斜率和截距计算线段起始坐标</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    height, width, _ = frame.shape</span><br><span class="line">    slope, intercept = line</span><br><span class="line">    y1 = height</span><br><span class="line">    y2 = <span class="built_in">int</span>(y1 * <span class="number">1</span> / <span class="number">2</span>)</span><br><span class="line">    x1 = <span class="built_in">max</span>(-width, <span class="built_in">min</span>(<span class="number">2</span> * width, <span class="built_in">int</span>((y1 - intercept) / slope)))</span><br><span class="line">    x2 = <span class="built_in">max</span>(-width, <span class="built_in">min</span>(<span class="number">2</span> * width, <span class="built_in">int</span>((y2 - intercept) / slope)))</span><br><span class="line">    <span class="keyword">return</span> [[x1, y1, x2, y2]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display_line</span>(<span class="params">frame, lines, line_color=(<span class="params"><span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span></span>), line_width=<span class="number">2</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    在原图上展示线段</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    line_img = np.zeros_like(frame)</span><br><span class="line">    <span class="keyword">if</span> lines <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="keyword">for</span> x1, y1, x2, y2 <span class="keyword">in</span> line:</span><br><span class="line">                cv2.line(line_img, (x1, y1), (x2, y2), line_color, line_width)</span><br><span class="line">    line_img = cv2.addWeighted(frame, <span class="number">0.8</span>, line_img, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> line_img</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完整采集代码如下，同样有一定的变化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入系统库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> gym_donkeycar</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 导入自定义库</span></span><br><span class="line"><span class="keyword">from</span> tools <span class="keyword">import</span> region_of_interest, detect_line, make_points, average_lines, display_line</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    主函数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 设置模拟器环境</span></span><br><span class="line">    env = gym.make(<span class="string">&quot;donkey-generated-roads-v0&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 重置当前场景</span></span><br><span class="line">    obv = env.reset()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 开始启动</span></span><br><span class="line">    action = np.array([<span class="number">0</span>, <span class="number">0.3</span>])  <span class="comment"># 动作控制，第1个转向值，第2个油门值</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 执行动作</span></span><br><span class="line">    obv, reward, done, info = env.step(action)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 获取图像</span></span><br><span class="line">    frame = cv2.cvtColor(obv, cv2.COLOR_RGB2BGR)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 运行4000次动作</span></span><br><span class="line">    pic_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4000</span>):</span><br><span class="line">        <span class="comment"># 转换图像到HSV空间</span></span><br><span class="line">        height, width, _ = frame.shape</span><br><span class="line">        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 黄色区域检测</span></span><br><span class="line">        lower_blue = np.array([<span class="number">15</span>, <span class="number">40</span>, <span class="number">40</span>])</span><br><span class="line">        upper_blue = np.array([<span class="number">45</span>, <span class="number">255</span>, <span class="number">255</span>])</span><br><span class="line">        yellow_mask = cv2.inRange(hsv, lower_blue, upper_blue)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 白色区域检测</span></span><br><span class="line">        lower_blue = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>])</span><br><span class="line">        upper_blue = np.array([<span class="number">180</span>, <span class="number">30</span>, <span class="number">255</span>])</span><br><span class="line">        white_mask = cv2.inRange(hsv, lower_blue, upper_blue)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 黄色线边缘提取</span></span><br><span class="line">        yellow_edge = cv2.Canny(yellow_mask, <span class="number">200</span>, <span class="number">400</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 白色线边缘提取</span></span><br><span class="line">        white_edge = cv2.Canny(white_mask, <span class="number">200</span>, <span class="number">400</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 黄色线感兴趣区域提取</span></span><br><span class="line">        yellow_roi = region_of_interest(yellow_edge, color=<span class="string">&#x27;yellow&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 白色线感兴趣区域提取</span></span><br><span class="line">        white_roi = region_of_interest(white_edge, color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 黄色线段检测</span></span><br><span class="line">        yellow_lines = detect_line(yellow_roi)</span><br><span class="line">        yellow_lane = average_lines(frame, yellow_lines, direction=<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">        <span class="comment">#yellow_show = display_line(frame, yellow_lane)</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 白色线段检测</span></span><br><span class="line">        white_lines = detect_line(white_roi)</span><br><span class="line">        white_lane = average_lines(frame, white_lines, direction=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">        <span class="comment">#white_show = display_line(frame, white_lane, line_color=(255, 0, 0))</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 计算转向角</span></span><br><span class="line">        x_offset = <span class="number">0</span></span><br><span class="line">        y_offset = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(yellow_lane) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(white_lane) &gt; <span class="number">0</span>:  <span class="comment"># 检测到2条线</span></span><br><span class="line">            _, _, left_x2, _ = yellow_lane[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            _, _, right_x2, _ = white_lane[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            mid = <span class="built_in">int</span>(width / <span class="number">2</span>)</span><br><span class="line">            x_offset = (left_x2 + right_x2) / <span class="number">2</span> - mid</span><br><span class="line">            y_offset = <span class="built_in">int</span>(height / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(yellow_lane) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(yellow_lane[<span class="number">0</span>]) == <span class="number">1</span>:  <span class="comment"># 只检测到黄色行道线</span></span><br><span class="line">            x1, _, x2, _ = yellow_lane[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            x_offset = x2 - x1</span><br><span class="line">            y_offset = <span class="built_in">int</span>(height / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(white_lane) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(white_lane[<span class="number">0</span>]) == <span class="number">1</span>:  <span class="comment"># 只检测到白色行道线</span></span><br><span class="line">            x1, _, x2, _ = white_lane[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            x_offset = x2 - x1</span><br><span class="line">            y_offset = <span class="built_in">int</span>(height / <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 一条线都没检测到</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;检测不到行道线，退出程序&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">        angle_to_mid_radian = math.atan(x_offset / y_offset)</span><br><span class="line">        angle_to_mid_deg = <span class="built_in">int</span>(angle_to_mid_radian * <span class="number">180.0</span> / math.pi)</span><br><span class="line">        steering_angle = angle_to_mid_deg / <span class="number">45.0</span></span><br><span class="line">        action = np.array([steering_angle, <span class="number">0.1</span>])  <span class="comment"># 油门值恒定</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 记录当前图像和转向角度</span></span><br><span class="line">        img_path = <span class="string">&quot;log/&#123;:d&#125;_&#123;:.4f&#125;.jpg&quot;</span>.<span class="built_in">format</span>(pic_index, steering_angle)</span><br><span class="line">        cv2.imwrite(img_path, frame)</span><br><span class="line">        pic_index += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 执行动作</span></span><br><span class="line">        obv, reward, done, info = env.step(action)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 重新获取图像</span></span><br><span class="line">        frame = cv2.cvtColor(obv, cv2.COLOR_RGB2BGR)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 运行完以后重置当前场景</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结束本次采集&#x27;</span>)</span><br><span class="line">    obv = env.reset()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    主函数入口</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>图片名采用“图片帧号_转向角度.jpg”的形式命名。上述代码每次跑完会在log目录下生成4000多张图片。由于每次的地图都是随机生成的，因此我们可以多跑几次，多收集一些数据。</p><p><img src="/.com//桌面\基于深度学习的endtoend自动驾驶\Snipaste_2022-04-30_13-50-48.png"></p><p>最终共采集10个文件夹图片，总共4万张图片：</p><p><img src="/.com//桌面\基于深度学习的endtoend自动驾驶\Snipaste_2022-04-30_17-05-30.png"></p><p>接下来我们需要对这些图片进行整理，拆分数据集用于训练和验证。我们把这些文件夹移动到data&#x2F;simulate下，注意这个文件夹<strong>需要自己手动创建</strong>。</p><p>详细脚本代码create_data_lists.py如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入系统库</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creat_data_list</span>(<span class="params">dataset_path, file_list, mode=<span class="string">&#x27;train&#x27;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    创建txt文件列表</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(os.path.join(dataset_path, (mode + <span class="string">&#x27;.txt&#x27;</span>)), <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> (imgpath, angle) <span class="keyword">in</span> file_list:</span><br><span class="line">            f.write(imgpath + <span class="string">&#x27; &#x27;</span> + <span class="built_in">str</span>(angle) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(mode + <span class="string">&#x27;.txt 已生成&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getFileList</span>(<span class="params"><span class="built_in">dir</span>, Filelist, ext=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取文件夹及其子文件夹中文件列表</span></span><br><span class="line"><span class="string">    输入 dir: 文件夹根目录</span></span><br><span class="line"><span class="string">    输入 ext: 扩展名</span></span><br><span class="line"><span class="string">    返回: 文件路径列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    newDir = <span class="built_in">dir</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(<span class="built_in">dir</span>):</span><br><span class="line">        <span class="keyword">if</span> ext <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            Filelist.append(<span class="built_in">dir</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> ext <span class="keyword">in</span> <span class="built_in">dir</span>[-<span class="number">3</span>:]:</span><br><span class="line">                Filelist.append(<span class="built_in">dir</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">elif</span> os.path.isdir(<span class="built_in">dir</span>):</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> os.listdir(<span class="built_in">dir</span>):</span><br><span class="line">            newDir = os.path.join(<span class="built_in">dir</span>, s)</span><br><span class="line">            getFileList(newDir, Filelist, ext)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> Filelist</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    主函数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 设置参数</span></span><br><span class="line">    org_img_folder = <span class="string">&#x27;./data/simulate&#x27;</span>  <span class="comment"># 数据集根目录</span></span><br><span class="line">    train_ratio = <span class="number">0.8</span>  <span class="comment"># 训练集占比</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 检索jpg文件</span></span><br><span class="line">    jpglist = getFileList(org_img_folder, [], <span class="string">&#x27;jpg&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;本次执行检索到 &#x27;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(jpglist)) + <span class="string">&#x27; 个jpg文件\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    file_list = <span class="built_in">list</span>()</span><br><span class="line">    <span class="comment"># 解析转向值</span></span><br><span class="line">    <span class="keyword">for</span> jpgpath <span class="keyword">in</span> jpglist:</span><br><span class="line">        <span class="built_in">print</span>(jpgpath)</span><br><span class="line">        curDataDir = os.path.dirname(jpgpath)</span><br><span class="line">        basename = os.path.basename(jpgpath)</span><br><span class="line">        angle = (basename[:-<span class="number">4</span>]).split(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        imgPath = os.path.join(curDataDir, basename).replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">        file_list.append((imgPath, angle))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 切分数据</span></span><br><span class="line">    random.seed(<span class="number">256</span>)</span><br><span class="line">    random.shuffle(file_list)</span><br><span class="line">    train_num = <span class="built_in">int</span>(<span class="built_in">len</span>(file_list) * train_ratio)</span><br><span class="line">    train_list = file_list[<span class="number">0</span>:train_num]</span><br><span class="line">    val_list = file_list[train_num:]</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 创建列表文件</span></span><br><span class="line">    creat_data_list(org_img_folder, train_list, mode=<span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">    creat_data_list(org_img_folder, val_list, mode=<span class="string">&#x27;val&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    程序入口</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>上述代码我们查找每个log文件夹下的jpg文件，然后解析出对应的转向值。将这些值最后分别保存到train.txt和val.txt文件中。在代码里面，我们设定训练集占比0.8，剩下的0.2则为验证集。</p><p>生成的train.txt和val.txt文件每行内容表示一个样本，由图片路径和转向值组成，中间用空格隔开。</p><p>接下来我们将使用Pytoch框架实现深度学习算法进行训练、验证。 </p><h3 id="3-3模型训练"><a href="#3-3模型训练" class="headerlink" title="3.3模型训练"></a>3.3模型训练</h3><p> 首先定义数据采集器datasets.py，代码如下： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入系统库</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 导入PyTorch库</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AutoDriveDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    数据集加载器</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data_folder, mode, transform=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :参数 data_folder: # 数据文件所在文件夹根路径(train.txt和val.txt所在文件夹路径)</span></span><br><span class="line"><span class="string">        :参数 mode: &#x27;train&#x27; 或者 &#x27;val&#x27;</span></span><br><span class="line"><span class="string">        :参数 normalize_type: 图像归一化处理方式</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">        self.data_folder = data_folder</span><br><span class="line">        self.mode = mode.lower()</span><br><span class="line">        self.transform = transform</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">assert</span> self.mode <span class="keyword">in</span> &#123;<span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;val&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 读取图像列表路径</span></span><br><span class="line">        <span class="keyword">if</span> self.mode == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">            file_path=os.path.join(data_folder, <span class="string">&#x27;train.txt&#x27;</span>)            </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            file_path=os.path.join(data_folder, <span class="string">&#x27;val.txt&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        self.file_list=<span class="built_in">list</span>()      </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            files = f.readlines()</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> file.strip() <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                self.file_list.append([file.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>],<span class="built_in">float</span>(file.split(<span class="string">&#x27; &#x27;</span>)[<span class="number">1</span>])])</span><br><span class="line">                </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, i</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :参数 i: 图像检索号</span></span><br><span class="line"><span class="string">        :返回: 返回第i个图像和标签</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 读取图像</span></span><br><span class="line">        img = cv2.imread(self.file_list[i][<span class="number">0</span>])</span><br><span class="line">        img = cv2.cvtColor(img,cv2.COLOR_BGR2HSV)</span><br><span class="line">        <span class="keyword">if</span> self.transform:</span><br><span class="line">            img = self.transform(img)</span><br><span class="line">        <span class="comment"># 读取标签</span></span><br><span class="line">        label = self.file_list[i][<span class="number">1</span>]</span><br><span class="line">        label = torch.from_numpy(np.array([label])).<span class="built_in">float</span>()</span><br><span class="line">        <span class="keyword">return</span> img, label</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        为了使用PyTorch的DataLoader,必须提供该方法.</span></span><br><span class="line"><span class="string">        :返回: 加载的图像总数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.file_list)</span><br></pre></td></tr></table></figure><p>上述代码比较简单，我们构造了AutoDriveDataset类用于作为自动驾驶小车数据读取类，从train.txt和val.txt中根据每行内容得到每个样本的图像路径和对应的真值标签。这里需要注意下颜色空间，我们最终是使用HSV空间进行训练的，因此需要做一下转化。</p><p>这里插播一下一个自定义的方法库utils.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AverageMeter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    平均器类,用于计算平均值、总和</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.reset()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        self.val = <span class="number">0</span></span><br><span class="line">        self.avg = <span class="number">0</span></span><br><span class="line">        self.<span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, val, n=<span class="number">1</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">sum</span> += val * n</span><br><span class="line">        self.count += n</span><br><span class="line">        self.avg = self.<span class="built_in">sum</span> / self.count</span><br></pre></td></tr></table></figure><p>虽然这个文件里面只有一个类，但创建这样一个文件是习惯。</p><p>有了数据读取类以后我们就下来定义模型，具体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入PyTorch库</span></span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AutoDriveNet</span>(nn.Module):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    端到端自动驾驶模型</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(AutoDriveNet, self).__init__()</span><br><span class="line">        self.conv_layers = nn.Sequential(nn.Conv2d(<span class="number">3</span>, <span class="number">24</span>, <span class="number">5</span>, stride=<span class="number">2</span>),</span><br><span class="line">                                         nn.ELU(),</span><br><span class="line">                                         nn.Conv2d(<span class="number">24</span>, <span class="number">36</span>, <span class="number">5</span>, stride=<span class="number">2</span>),</span><br><span class="line">                                         nn.ELU(),</span><br><span class="line">                                         nn.Conv2d(<span class="number">36</span>, <span class="number">48</span>, <span class="number">5</span>, stride=<span class="number">2</span>),</span><br><span class="line">                                         nn.ELU(), nn.Conv2d(<span class="number">48</span>, <span class="number">64</span>, <span class="number">3</span>),</span><br><span class="line">                                         nn.ELU(), nn.Conv2d(<span class="number">64</span>, <span class="number">64</span>, <span class="number">3</span>),</span><br><span class="line">                                         nn.Dropout(<span class="number">0.5</span>))</span><br><span class="line">        self.linear_layers = nn.Sequential(</span><br><span class="line">            <span class="comment">#nn.Linear(in_features=64 * 2 * 33, out_features=100),</span></span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span> * <span class="number">8</span> * <span class="number">13</span>, out_features=<span class="number">100</span>),</span><br><span class="line">            nn.ELU(),</span><br><span class="line">            nn.Linear(in_features=<span class="number">100</span>, out_features=<span class="number">50</span>),</span><br><span class="line">            nn.ELU(),</span><br><span class="line">            nn.Linear(in_features=<span class="number">50</span>, out_features=<span class="number">10</span>),</span><br><span class="line">            nn.Linear(in_features=<span class="number">10</span>, out_features=<span class="number">1</span>))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        前向推理</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">input</span> = <span class="built_in">input</span>.view(<span class="built_in">input</span>.size(<span class="number">0</span>), <span class="number">3</span>, <span class="number">120</span>, <span class="number">160</span>)</span><br><span class="line">        output = self.conv_layers(<span class="built_in">input</span>)</span><br><span class="line">        output = output.view(output.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        output = self.linear_layers(output)</span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p>这里需要注意的是我们的模型跟论文里的稍微有点不一样(见下)，主要是因为我们的图像尺寸是120x160的，而论文里使用的是66x200。因此，我们对应的输入需要调整下，另外，在最后全连接层也相应的在维度上要调整。对于实际项目来说，现在很多的摄像头都是使用3:4分辨率的，例如树莓派摄像头典型的分辨率是480x640，因此，修改过后的模型更具有普遍性，还方便后面迁移到真实环境训练。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">self.conv_layers = nn.Sequential(nn.Conv2d(<span class="number">3</span>, <span class="number">24</span>, <span class="number">5</span>, stride=<span class="number">2</span>),</span><br><span class="line">                                         nn.ELU(),</span><br><span class="line">                                         nn.Conv2d(<span class="number">24</span>, <span class="number">36</span>, <span class="number">5</span>, stride=<span class="number">2</span>),</span><br><span class="line">                                         nn.ELU(),</span><br><span class="line">                                         nn.Conv2d(<span class="number">36</span>, <span class="number">48</span>, <span class="number">5</span>, stride=<span class="number">2</span>),</span><br><span class="line">                                         nn.ELU(), nn.Conv2d(<span class="number">48</span>, <span class="number">64</span>, <span class="number">3</span>),</span><br><span class="line">                                         nn.ELU(), nn.Conv2d(<span class="number">64</span>, <span class="number">64</span>, <span class="number">3</span>),</span><br><span class="line">                                         nn.Dropout(<span class="number">0.5</span>))</span><br><span class="line">self.linear_layers = nn.Sequential(</span><br><span class="line">            <span class="comment">#nn.Linear(in_features=64 * 2 * 33, out_features=100),</span></span><br><span class="line">            nn.Linear(in_features=<span class="number">64</span> * <span class="number">8</span> * <span class="number">13</span>, out_features=<span class="number">100</span>),</span><br><span class="line">            nn.ELU(),</span><br><span class="line">            nn.Linear(in_features=<span class="number">100</span>, out_features=<span class="number">50</span>),</span><br><span class="line">            nn.ELU(),</span><br><span class="line">            nn.Linear(in_features=<span class="number">50</span>, out_features=<span class="number">10</span>),</span><br><span class="line">            nn.Linear(in_features=<span class="number">10</span>, out_features=<span class="number">1</span>))                                         </span><br></pre></td></tr></table></figure><p>整个模型比较简单，前面是多个cnn，最后接几个全连接网络，输入是3通道图像，输出是一个转向回归值。</p><p>训练脚本代码train.py如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入torch库</span></span><br><span class="line"><span class="keyword">import</span> torch.backends.cudnn <span class="keyword">as</span> cudnn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入自定义库</span></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> AutoDriveNet</span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> AutoDriveDataset</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    训练.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 数据集路径</span></span><br><span class="line">    data_folder = <span class="string">&#x27;./data/simulate&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 学习参数</span></span><br><span class="line">    checkpoint = <span class="literal">None</span>  <span class="comment"># 预训练模型路径，如果不存在则为None</span></span><br><span class="line">    <span class="comment"># checkpoint = &quot;./results/checkpoint.pth&quot;</span></span><br><span class="line">    batch_size = <span class="number">400</span>  <span class="comment"># 批大小</span></span><br><span class="line">    start_epoch = <span class="number">1</span>  <span class="comment"># 轮数起始位置</span></span><br><span class="line">    epochs = <span class="number">1000</span>  <span class="comment"># 迭代轮数</span></span><br><span class="line">    lr = <span class="number">1e-4</span>  <span class="comment"># 学习率</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设备参数</span></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(torch.cuda.is_available(), device)</span><br><span class="line">    <span class="comment">#ngpu = 4  # 用来运行的gpu数量</span></span><br><span class="line">    cudnn.benchmark = <span class="literal">True</span>  <span class="comment"># 对卷积进行加速</span></span><br><span class="line">    writer = SummaryWriter()  <span class="comment"># 实时监控     使用命令 tensorboard --logdir runs  进行查看</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化模型</span></span><br><span class="line">    model = AutoDriveNet()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化优化器</span></span><br><span class="line">    optimizer = torch.optim.Adam(params=<span class="built_in">filter</span>(<span class="keyword">lambda</span> p: p.requires_grad,</span><br><span class="line">                                               model.parameters()),</span><br><span class="line">                                 lr=lr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 迁移至默认设备进行训练</span></span><br><span class="line">    model = model.to(device)</span><br><span class="line">    model = model.cuda()</span><br><span class="line">    criterion = nn.MSELoss().to(device)</span><br><span class="line">    criterion = nn.MSELoss().cuda()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载预训练模型</span></span><br><span class="line">    <span class="keyword">if</span> checkpoint <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        checkpoint = torch.load(checkpoint)</span><br><span class="line">        start_epoch = checkpoint[<span class="string">&#x27;epoch&#x27;</span>] + <span class="number">1</span></span><br><span class="line">        model.load_state_dict(checkpoint[<span class="string">&#x27;model&#x27;</span>])</span><br><span class="line">        optimizer.load_state_dict(checkpoint[<span class="string">&#x27;optimizer&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单机多卡训练</span></span><br><span class="line">    <span class="comment"># if torch.cuda.is_available():</span></span><br><span class="line">    <span class="comment">#   model = nn.DataParallel(model, device_ids=list(range(ngpu)))</span></span><br><span class="line">    <span class="comment">#   model = nn.DataParallel(model, device_ids=[0])</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定制化的dataloader</span></span><br><span class="line">    transformations = transforms.Compose([</span><br><span class="line">        transforms.ToTensor(),  <span class="comment"># 通道置前并且将0-255RGB值映射至0-1</span></span><br><span class="line">        <span class="comment"># transforms.Normalize(</span></span><br><span class="line">        <span class="comment">#     mean=[0.485, 0.456, 0.406],  # 归一化至[-1,1] mean std 来自imagenet 计算</span></span><br><span class="line">        <span class="comment">#     std=[0.229, 0.224, 0.225])</span></span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">    train_dataset = AutoDriveDataset(data_folder,</span><br><span class="line">                                     mode=<span class="string">&#x27;train&#x27;</span>,</span><br><span class="line">                                     transform=transformations)</span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_dataset,</span><br><span class="line">                                               batch_size=batch_size,</span><br><span class="line">                                               shuffle=<span class="literal">True</span>,</span><br><span class="line">                                               num_workers=<span class="number">0</span>,</span><br><span class="line">                                               pin_memory=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始逐轮训练</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(start_epoch, epochs + <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">        model.train()  <span class="comment"># 训练模式：允许使用批样本归一化</span></span><br><span class="line">        loss_epoch = AverageMeter()  <span class="comment"># 统计损失函数</span></span><br><span class="line">        n_iter = <span class="built_in">len</span>(train_loader)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 按批处理</span></span><br><span class="line">        <span class="keyword">for</span> i, (imgs, labels) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">            <span class="comment"># 数据移至默认设备进行训练</span></span><br><span class="line">            imgs = imgs.to(device)</span><br><span class="line">            labels = labels.to(device)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 前向传播</span></span><br><span class="line">            pre_labels = model(imgs)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算损失</span></span><br><span class="line">            loss = criterion(pre_labels, labels)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 后向传播</span></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新模型</span></span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 记录损失值</span></span><br><span class="line">            loss_epoch.update(loss.item(), imgs.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 打印结果</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第 &quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot; 个batch训练结束&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 手动释放内存</span></span><br><span class="line">        <span class="keyword">del</span> imgs, labels, pre_labels</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 监控损失值变化</span></span><br><span class="line">        writer.add_scalar(<span class="string">&#x27;MSE_Loss&#x27;</span>, loss_epoch.avg, epoch)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;epoch:&#x27;</span> + <span class="built_in">str</span>(epoch) + <span class="string">&#x27;  MSE_Loss:&#x27;</span> + <span class="built_in">str</span>(loss_epoch.avg))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存预训练模型</span></span><br><span class="line">        torch.save(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;epoch&#x27;</span>: epoch,</span><br><span class="line">                <span class="comment"># &#x27;model&#x27;: model.module.state_dict(),</span></span><br><span class="line">                <span class="string">&#x27;model&#x27;</span>: model.state_dict(),</span><br><span class="line">                <span class="string">&#x27;optimizer&#x27;</span>: optimizer.state_dict()</span><br><span class="line">            &#125;, <span class="string">&#x27;results/checkpoint.pth&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练结束关闭监控</span></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    程序入口</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>新旧版更替，不同的运行环境都有可能导致代码报各种错误。这里真是坑到不行qwq。经过我反复测试，大家报错时可以解开就近的注释部分进行尝试，这应该是目前最为稳定的版本了。</p><p>注意：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">writer = SummaryWriter()</span><br><span class="line">writer.add_scalar(<span class="string">&#x27;MSE_Loss&#x27;</span>, loss_epoch.avg, epoch)</span><br></pre></td></tr></table></figure><p>第一行代码及下面的相关方法使得我们可以在pycharm下方终端使用命令 tensorboard –logdir runs  ，点击出现的网页链接(用edge或者chome)，可以看到误差改变情况。如果这行代码报错了，请在终端运行命令  pip install tensorboard等待安装完成。反复刷新浏览器可以更新。根据网页提示进行使用。如果测试的时候运行过太多次，可以修改第二行代码的字符串，会生成一个新的表。删除根目录下run的文件也可以起到减少的作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ngpu = 4  # 用来运行的gpu数量</span></span><br><span class="line"><span class="comment"># 单机多卡训练</span></span><br><span class="line">    <span class="comment"># if torch.cuda.is_available():</span></span><br><span class="line">    <span class="comment">#   model = nn.DataParallel(model, device_ids=list(range(ngpu)))</span></span><br><span class="line">    <span class="comment">#   model = nn.DataParallel(model, device_ids=[0])</span></span><br></pre></td></tr></table></figure><p>只有一个显卡的同学一定要注意保持所有单机多卡训练的代码处于注释状态(我在这儿被坑惨了)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">torch.save(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;epoch&#x27;</span>: epoch,</span><br><span class="line">                <span class="comment"># &#x27;model&#x27;: model.module.state_dict(),</span></span><br><span class="line">                <span class="string">&#x27;model&#x27;</span>: model.state_dict(),</span><br><span class="line">                <span class="string">&#x27;optimizer&#x27;</span>: optimizer.state_dict()</span><br><span class="line">            &#125;, <span class="string">&#x27;results/checkpoint.pth&#x27;</span>)</span><br></pre></td></tr></table></figure><p>对model字段的保存，有的版本需要用注释里的字段，有的用当前的就行。请注意results文件夹最好手动创建。</p><h3 id="3-4模型验证"><a href="#3-4模型验证" class="headerlink" title="3.4模型验证"></a>3.4模型验证</h3><p>上面的代码需要迭代1000次, epoch&#x3D;1000的时候基本处在一个比较好的收敛位置，此时误差下降到1e-5左右。不过在跑到第140次左右时就已经下降到1e-4，让误差下降一个数量级在实际工程中还是非常重要的，不过同学们在使用的时候其实跑到这样也能用了。</p><p>验证代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入系统库</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入PyTorch库</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.backends.cudnn <span class="keyword">as</span> cudnn</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入自定义库</span></span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> AutoDriveDataset</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> AutoDriveNet</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 测试集目录</span></span><br><span class="line">    data_folder = <span class="string">&quot;./data/simulate&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义运行的GPU数量</span></span><br><span class="line">    ngpu = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># cudnn.benchmark = True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义设备运行环境</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;定义设备环境&quot;</span>)</span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载预训练模型</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加载预训练模型&quot;</span>)</span><br><span class="line">    checkpoint = torch.load(<span class="string">&quot;./results/checkpoint.pth&quot;</span>)</span><br><span class="line">    model = AutoDriveNet()</span><br><span class="line">    model = model.to(device)</span><br><span class="line">    model.load_state_dict(checkpoint[<span class="string">&#x27;model&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多GPU封装</span></span><br><span class="line">    <span class="comment">#if torch.cuda.is_available():</span></span><br><span class="line">     <span class="comment">#   model = nn.DataParallel(model, device_ids=list(range(ngpu)))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定制化的dataloader</span></span><br><span class="line">    <span class="comment"># 定制dataloader</span></span><br><span class="line">    transformations = transforms.Compose([</span><br><span class="line">        transforms.ToTensor(),  <span class="comment"># 通道置前并且将0-255RGB值映射至0-1</span></span><br><span class="line">        <span class="comment"># transforms.Normalize(</span></span><br><span class="line">        <span class="comment">#     mean=[0.485, 0.456, 0.406],  # 归一化至[-1,1] mean std 来自imagenet 计算</span></span><br><span class="line">        <span class="comment">#     std=[0.229, 0.224, 0.225])</span></span><br><span class="line">    ])</span><br><span class="line">    val_dataset = AutoDriveDataset(data_folder,</span><br><span class="line">                                   mode=<span class="string">&#x27;val&#x27;</span>,</span><br><span class="line">                                   transform=transformations</span><br><span class="line">                                   )</span><br><span class="line"></span><br><span class="line">    val_loader = torch.utils.data.DataLoader(val_dataset, batch_size=<span class="number">1</span>, shuffle=<span class="literal">False</span>, num_workers=<span class="number">1</span>,</span><br><span class="line">                                             pin_memory=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义评估指标</span></span><br><span class="line">    criterion = nn.MSELoss().to(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录误差值</span></span><br><span class="line">    MSEs = AverageMeter()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录测试时间</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    start = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始进行测试&quot;</span>)</span><br><span class="line">        <span class="comment"># 逐批样本进行推理计算</span></span><br><span class="line">        <span class="keyword">for</span> i, (imgs, labels) <span class="keyword">in</span> <span class="built_in">enumerate</span>(val_loader):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;次计算进行中&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">            <span class="comment"># 数据移至默认设备进行推理</span></span><br><span class="line">            imgs = imgs.to(device)</span><br><span class="line">            labels = labels.to(device)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 前向传播</span></span><br><span class="line">            pre_labels = model(imgs)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算误差</span></span><br><span class="line">            loss = criterion(pre_labels, labels)</span><br><span class="line">            MSEs.update(loss.item(), imgs.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出平均均方误差</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;MSE  &#123;mses.avg: .3f&#125;&#x27;</span>.<span class="built_in">format</span>(mses=MSEs))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;平均单张样本用时  &#123;:.3f&#125; 秒&#x27;</span>.<span class="built_in">format</span>((time.time() - start) / <span class="built_in">len</span>(val_dataset)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    程序入口</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/.com//桌面\基于深度学习的endtoend自动驾驶\Snipaste_2022-05-01_12-49-31.png"></p><p>我们的转向角度取值范围是[-1, 1]，这样的误差比较小，是可以接受的。请注意多卡训练的同学，一定要解开nn.DataParallel的注释，否则是无法运行的。</p><p>这里等待的时间比较长，所以我增加了一些print输出来判断到底是电脑卡了还是程序在运行。同学们如果配置比较低，也建议这样自行增加一些print。</p><h3 id="3-5单张图片预测"><a href="#3-5单张图片预测" class="headerlink" title="3.5单张图片预测"></a>3.5单张图片预测</h3><p>为什么上一步已经用8000张图片进行预测了，这里还要用单张图片来尝试呢？真实的自动驾驶的时候，我们是要对每一张图片进行分析的。所以这里来尝试一下用单张图片来分析。</p><p>我们选取一张比较有代表性的图片:</p><p><img src="/.com//桌面\基于深度学习的endtoend自动驾驶\3976_0.2444.jpg"></p><p>大家可以先猜测一下这个转向角度。</p><p>下面是测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入OpenCV库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 导入PyTorch库</span></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 导入自定义库</span></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> AutoDriveNet</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    主函数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 测试图像</span></span><br><span class="line">    imgPath = <span class="string">&#x27;./results/test.jpg&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 推理环境</span></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 加载训练好的模型</span></span><br><span class="line">    checkpoint = torch.load(<span class="string">&#x27;./results/checkpoint.pth&#x27;</span>)</span><br><span class="line">    model = AutoDriveNet()</span><br><span class="line">    model = model.to(device)</span><br><span class="line">    model.load_state_dict(checkpoint[<span class="string">&#x27;model&#x27;</span>],strict=<span class="literal">False</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 加载图像</span></span><br><span class="line">    img = cv2.imread(imgPath)</span><br><span class="line">    img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 图像预处理</span></span><br><span class="line">    <span class="comment"># PIXEL_MEANS = (0.485, 0.456, 0.406)  # RGB格式的均值和方差</span></span><br><span class="line">    <span class="comment"># PIXEL_STDS = (0.229, 0.224, 0.225)</span></span><br><span class="line">    img = torch.from_numpy(img.copy()).<span class="built_in">float</span>()</span><br><span class="line">    img /= <span class="number">255.0</span></span><br><span class="line">    <span class="comment"># img -= torch.tensor(PIXEL_MEANS)</span></span><br><span class="line">    <span class="comment"># img /= torch.tensor(PIXEL_STDS)</span></span><br><span class="line">    img = img.permute(<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    img.unsqueeze_(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 转移数据至设备</span></span><br><span class="line">    img = img.to(device)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 模型推理</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        prelabel = model(img).squeeze(<span class="number">0</span>).cpu().detach().numpy()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;预测结果  &#123;:.3f&#125; &#x27;</span>.<span class="built_in">format</span>(prelabel[<span class="number">0</span>]))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    程序入口</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>请注意一定要把测试的图片移动到result目录下，且命名为test.jpg，或修改代码中对应行。</p><p>测试结果：</p><p><img src="/.com//桌面\基于深度学习的endtoend自动驾驶\Snipaste_2022-05-01_13-03-45.png"></p><p>而实际上这台小车正准备右转，转向值为0.244。趋势上是正确的，而效果上也是可以接受的。</p><h3 id="3-6系统集成，自动驾驶"><a href="#3-6系统集成，自动驾驶" class="headerlink" title="3.6系统集成，自动驾驶"></a>3.6系统集成，自动驾驶</h3><p>我们现在可以使用pytorch逐帧分析图像，然后直接给出转向值用于小车控制，不再需要复杂的、分散的图像处理步骤。</p><p>只需要把上一小节的代码和之前的控制代码合并即可实现。编程能力强的同学可以留作练习。</p><p>运行auto_drive.py文件，其完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入系统库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> gym</span><br><span class="line"><span class="keyword">import</span> gym_donkeycar</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 导入PyTorch库</span></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 导入自定义库</span></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> AutoDriveNet</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> *</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    主函数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 设置模拟器环境</span></span><br><span class="line">    env = gym.make(<span class="string">&quot;donkey-generated-roads-v0&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置推理环境</span></span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 加载训练好的模型</span></span><br><span class="line">    checkpoint = torch.load(<span class="string">&#x27;./results/checkpoint.pth&#x27;</span>)</span><br><span class="line">    model = AutoDriveNet()</span><br><span class="line">    model = model.to(device)</span><br><span class="line">    model.load_state_dict(checkpoint[<span class="string">&#x27;model&#x27;</span>])</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 重置当前场景</span></span><br><span class="line">    obv = env.reset()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 开始启动</span></span><br><span class="line">    action = np.array([<span class="number">0</span>, <span class="number">0.1</span>])  <span class="comment"># 动作控制，第1个转向值，第2个油门值</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 执行动作并获取图像</span></span><br><span class="line">    img, reward, done, info = env.step(action)</span><br><span class="line">    img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 运行5000次动作</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5000</span>):</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 图像预处理</span></span><br><span class="line">        img = torch.from_numpy(img.copy()).<span class="built_in">float</span>()</span><br><span class="line">        img /= <span class="number">255.0</span></span><br><span class="line">        img = img.permute(<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        img.unsqueeze_(<span class="number">0</span>)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 转移数据至设备</span></span><br><span class="line">        img = img.to(device)</span><br><span class="line"> </span><br><span class="line">        <span class="comment"># 模型推理</span></span><br><span class="line">        steering_angle = <span class="number">0</span></span><br><span class="line">        factor=<span class="number">1</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="comment"># 计算转向角度</span></span><br><span class="line">            steering_angle = (model(img).squeeze(<span class="number">0</span>).cpu().detach().numpy())[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> steering_angle*factor&lt;-<span class="number">1</span>:</span><br><span class="line">                steering_angle=-<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> steering_angle*factor&gt;<span class="number">1</span>:</span><br><span class="line">                steering_angle=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                steering_angle=steering_angle*factor</span><br><span class="line">            <span class="built_in">print</span>(steering_angle)</span><br><span class="line">            action = np.array([steering_angle, <span class="number">0.1</span>])  <span class="comment"># 油门值恒定</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 执行动作并更新图像</span></span><br><span class="line">            img, reward, done, info = env.step(action)</span><br><span class="line">            img = cv2.cvtColor(img, cv2.COLOR_RGB2HSV)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 运行完以后重置当前场景</span></span><br><span class="line">    obv = env.reset()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    主函数入口</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>从视频效果上看，通过深度学习的自动驾驶小车其操控流畅性感觉上超过了它的“师傅”OpenCV版本。可能的原因在于纯粹的OpenCV图像处理方法对每帧单独处理，没有一个整体的去噪概念，容易在某一帧出现偏差。但是基于深度学习的方法更多的是学习整个数据集的操作体验，某种意义上做了一定的概率去噪，或者说是平均化，因此，整个的操控才会显得更加流畅。</p><p>到这里，这个简单的教程就结束了。恭喜你，你已经入门了end to end自动驾驶(大概)。希望我的拙见可以帮助到大家学习。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2023/03/27/MySQL/"/>
      <url>/2023/03/27/MySQL/</url>
      
        <content type="html"><![CDATA[<ol><li><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2></li></ol><p>到官网进行安装。点击MySQL Installer for Windows下载安装包后一直next即可。</p><ol start="2"><li><h2 id="启动与停止"><a href="#启动与停止" class="headerlink" title="启动与停止"></a>启动与停止</h2></li></ol><p>mysql开机默认启动。</p><p>在win+R运行services.msc，找到mysql右键操作。</p><p>在cmd中运行net start mysql80、net stop mysql80进行启动与停止。</p><ol start="3"><li><h2 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h2></li></ol><p>方式一：直接使用mysql提供的命令行进行连接。开始找到MySQL Command Line Client-Unicode，进去输入密码操作。</p><p>方式二：先配置PATH环境变量C:\Program Files\MySQL\MySQL Server 8.0\bin。在任意cmd输入mysql -u root -p，输入密码操作。</p><ol start="4"><li><h2 id="MySQL数据库的好处"><a href="#MySQL数据库的好处" class="headerlink" title="MySQL数据库的好处"></a>MySQL数据库的好处</h2></li></ol><p>关系型数据库RDBMS，建立在关系模型基础上，由多张相互连接的二维表组成的数据库。格式统一，便于维护，使用SQL语言操作，使用方便。数据模型是数据库，可以创建多个表。</p><ol start="5"><li><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2></li></ol><p>  （1） SQL通用语法</p><p>  <img src="/.com//image-20220608212631284.png" alt="image-20220608212631284"></p><p>  （2） SQL分类</p><p>  <img src="/.com//image-20220608231123489.png" alt="image-20220608231123489"></p><p>  （3） DDL</p><p>  ​查询数据库</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="keyword">select</span> database();# 查询当前数据库</span><br></pre></td></tr></table></figure><p>  ​如果创建了同样名称的数据库会报错。一般使用以下指令创建。</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span>;</span><br></pre></td></tr></table></figure><p>  ​在创建数据库的时候可以指定字符集。utf8只占有三个字节，而某些数据会占据四个字节，因此一般设置为utf8mb4</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> <span class="keyword">default</span> charset utf8mb4;</span><br></pre></td></tr></table></figure><p>  ​删除数据库 删除不存在的数据库同样会报错，因此使用以下指令进行删除</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> database IF <span class="keyword">EXISTS</span> databaseName;</span><br></pre></td></tr></table></figure><p>  ​数据库使用</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE databaseName;</span><br></pre></td></tr></table></figure><p>  ​表创建</p><ul><li>数据类型quality</li></ul><p>  ​1）数值类型</p><p>  <img src="/.com//image-20220609124851766.png" alt="image-20220609124851766"></p><p>  ​定义float和double类型时，需要两个参数。如score double(4, 1)代表4个长度，最多1位小数。</p><p>  ​定义无符号时应该是 age TINYINT UNSIGNED;,unsigned放在数据类型后面。</p><p>  ​2） 字符串类型</p><p>  <img src="/.com//image-20220609125257798.png" alt="image-20220609125257798"></p><p>  ​sql中字符串为varchar(size)，size是字符串的长度。一旦超出size会报错。varchar会动态占用内存，而char不管多大都必定占用size内存。但是char性能更高。</p><p>  ​例如用户名适合用varchar，性别适合用char。</p><p>  ​3） 日期类型</p><p>  <img src="/.com//image-20220609125639480.png" alt="image-20220609125639480"></p><p>  birthday date;</p><p>  注意最后一个字段没有逗号。 </p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tableName(</span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型 COMMENT “字段<span class="number">1</span>注释”,</span><br><span class="line">    ...</span><br><span class="line">    字段n 字段n类型 COMMENT “字段n注释”</span><br><span class="line">)COMMENT “表注释”；</span><br></pre></td></tr></table></figure><p>  ​查询当前数据库所有表，需要先用use指令进入数据库。</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><p>  ​查询表结构</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DESC</span> databaseName;</span><br></pre></td></tr></table></figure><p>  ​查询指定表的建表语句，用于展示详细注释</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> databaseName;</span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><p>  <img src="/.com//image-20220609130454987.png" alt="image-20220609130454987"></p><p>  ​表修改</p><p>  1）添加字段</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName <span class="keyword">ADD</span> fieldName quality COMMENT “注释” 约束;</span><br></pre></td></tr></table></figure><p>  <img src="/.com//image-20220612192330899.png" alt="image-20220612192330899"></p><p>​2） 修改数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName MDOIFY fieldName newQuality(size);</span><br></pre></td></tr></table></figure><p>​3） 修改字段名和字段类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName CHANGE oldTableName newTableName quality(size) COMMENT &quot;注释&quot; 约束;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20220613164607169.png" alt="image-20220613164607169"></p><p>​4)删除字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName <span class="keyword">DROP</span> filedName;</span><br></pre></td></tr></table></figure><p>​5)修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tableName RENAME <span class="keyword">TO</span> newTableName;</span><br></pre></td></tr></table></figure><p><img src="/.com//image-20220613164847531.png" alt="image-20220613164847531"></p><p>​6)删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tableName;</span><br></pre></td></tr></table></figure><p>​7)删除指定表，并重新创建空的表结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> tableName;</span><br></pre></td></tr></table></figure><ol start="6"><li>图形化工具DataGrip</li></ol><p>进入后点击左上角加号，新增mysql Data Sources ,配置文件。user填root，密码随便设置，确认后下载驱动文件。</p><p>​1） 创建数据库</p><p>右键 new 选择schema，填写名字。</p><pre><code> 2）新建表</code></pre><p>右键数据库 创建表，填写名字和注释信息。在colums中创建字段。点击execute。</p><p>​3）修改表</p><p>右键数据库 modify table</p><p>​4）使用sql语句操作 </p><p>右键 new quary console</p><p>​（4）DML 增删改操作</p><p><img src="/.com//image-20220618161047205.png" alt="image-20220618161047205"></p><p><img src="/.com//image-20220618161121394.png" alt="image-20220618161121394"></p><p><img src="/.com//image-20220618161328719.png" alt="image-20220618161328719"></p><p>如果没有where条件，会修改所有数据。</p><p><img src="/.com//image-20220618161853602.png" alt="image-20220618161853602"></p><p>（5）DQL 查操作 关键字：SELECT</p><p> 1）基础查询</p><p><img src="/.com//image-20220618162123361.png" alt="image-20220618162123361"></p><p>查询可以起别名。SELECT … as ‘ ,,, ‘ from …;其中as可以省略。</p><p>查询如果不要重复，可以在select后加distinct关键字。</p><p><img src="/.com//image-20220618163140955.png" alt="image-20220618163140955"></p><p><img src="/.com//image-20220618163247041.png" alt="image-20220618163247041"></p><p><img src="/.com//image-20220618163307080.png" alt="image-20220618163307080"></p><ul><li>聚合函数</li></ul><p><img src="/.com//image-20220618163412171.png" alt="image-20220618163412171"></p><p>count不会统计null，最好采用count(*)</p><p>2） 分组查询</p><p><img src="/.com//image-20220618163708910.png" alt="image-20220618163708910"></p><p><img src="/.com//image-20220618163846266.png" alt="image-20220618163846266"></p><p><img src="/.com//image-20220618163948066.png" alt="image-20220618163948066"></p><p>3） 排序查询</p><p><img src="/.com//image-20220618164045538.png" alt="image-20220618164045538"></p><p>如果是多字段排序，字段一 一样时才会用第二种排序</p><p>4） 分页查询</p><p><img src="/.com//image-20220618164338732.png" alt="image-20220618164338732"></p><ul><li>编写顺序与执行顺序</li></ul><p><img src="/.com//image-20220618164904815.png" alt="image-20220618164904815"></p><p>（6）DCL 管理数据库用户、控制数据库访问权限</p><p>1） 用户</p><p><img src="/.com//image-20220618165210119.png" alt="image-20220618165210119"></p><p><img src="/.com//image-20220618165444310.png" alt="image-20220618165444310"></p><p>2） 权限</p><p><img src="/.com//image-20220618165522969.png" alt="image-20220618165522969"></p><p><img src="/.com//image-20220618165546535.png" alt="image-20220618165546535"></p><p>主机名可以用’%’通配，表名用’*’通配。</p><ol start="7"><li>函数 mysql内置了函数。select 函数名();</li></ol><p>（1）字符串函数</p><p><img src="/.com//image-20220618165858267.png" alt="image-20220618165858267"></p><p>（2）数值函数</p><p><img src="/.com//image-20220618170006506.png" alt="image-20220618170006506"></p><p>（3）日期函数</p><p><img src="/.com//image-20220618170109965.png" alt="image-20220618170109965"></p><p>type填写YEAR、MONTH、DAY</p><p>（4）流程函数</p><p><img src="/.com//image-20220618170305620.png" alt="image-20220618170305620"></p><p><img src="/.com//image-20220618170413188.png" alt="image-20220618170413188"></p><ol start="8"><li>约束 保证数据的正确性和完整性</li></ol><p><img src="/.com//image-20220618170648105.png" alt="image-20220618170648105"></p><p><img src="/.com//image-20220618170843417.png" alt="image-20220618170843417"></p><p><img src="/.com//image-20220618171037126.png" alt="image-20220618171037126"></p><p>尽管没有插入成功，数据也会向mysql申请主键。</p><p>在可视化创建数据的时候可以直接勾选。</p><ul><li>外键关联 表之间的联系</li></ul><p><img src="/.com//image-20220618171436873.png" alt="image-20220618171436873"></p><p><img src="/.com//image-20220618171631373.png" alt="image-20220618171631373"></p><p><img src="/.com//image-20220618171705691.png" alt="image-20220618171705691"></p><p><img src="/.com//image-20220618171815398.png" alt="image-20220618171815398"></p><ol start="9"><li><p>事务 要么全部成功，要么全部失败</p><p> 方式一</p></li></ol><p><img src="/.com//image-20220618172507776.png" alt="image-20220618172507776"></p><p>​方式二</p><p><img src="/.com//image-20220618172801474.png" alt="image-20220618172801474"></p><ul><li>事务的四大特性</li></ul><p><img src="/.com//image-20220618172956835.png" alt="image-20220618172956835"></p><ul><li>并发事务问题</li></ul><p><img src="/.com//image-20220618173159379.png" alt="image-20220618173159379"></p><p>解决方法：事务的隔离级别</p><p><img src="/.com//image-20220618173605287.png" alt="image-20220618173605287"></p><h2 id="python-3中运行pip-install-Mysqlclient-通过import-MySQLdb来建立数据库的连接。"><a href="#python-3中运行pip-install-Mysqlclient-通过import-MySQLdb来建立数据库的连接。" class="headerlink" title="python 3中运行pip install Mysqlclient, 通过import MySQLdb来建立数据库的连接。"></a>python 3中运行pip install Mysqlclient, 通过import MySQLdb来建立数据库的连接。</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/2023/03/22/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/03/22/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="explicit"><a href="#explicit" class="headerlink" title="explicit"></a>explicit</h2><p>关键字，作为返回值时加上不调用拷贝构造函数。作为类关键字防止被拷贝。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>父类指针指向子类对象</p><p>父类提供virtual 虚函数，子类对象实现</p><p>析构函数加virtual，可以调用子类的析构函数</p><p>构造函数前不能加virtual，因为构造函数执行后，虚表才出现</p><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p><img src="/.com//image-20230315211914313.png" alt="image-20230315211914313"></p><p>类中，++i比i++效率高，因为后者还要调用构造函数</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>用父类指针作为返回值，在返回值创建子类对象</p><p><img src="/.com//image-20230315201712599.png" alt="image-20230315201712599"></p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="单体模式"><a href="#单体模式" class="headerlink" title="单体模式"></a>单体模式</h2><h2 id="sizeof、-countof"><a href="#sizeof、-countof" class="headerlink" title="sizeof、_countof"></a>sizeof、_countof</h2><p>_tscanf_s( _T(“%d”), v1, _countof(v1));</p><p><img src="/.com//image-20230315203513264.png" alt="image-20230315203513264"></p><p>sizeof 数据类型大小与数据大小相乘，实际的数据大小</p><p>countof 数据大小，实际上的数据数量</p><h2 id="结构体对齐"><a href="#结构体对齐" class="headerlink" title="结构体对齐"></a>结构体对齐</h2><p>大小为4，1，8，按最大的对齐</p><p><img src="/.com//image-20230315204035697.png" alt="image-20230315204035697"></p><p>如上，实际上为16。double占8，另外两个加起来用8</p><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>函数名一样，参数类型不同，参数数量不同</p><p>与返回值类型<strong>无关</strong></p><p>使用const，<strong>发生</strong>重载。</p><p><img src="/.com//image-20230315204445450.png" alt="image-20230315204445450"></p><p>const是常对象调用的。</p><h2 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h2><p>一个派生类D是由多继承产生的，它的多个基类B、C继承了同一个基类A。造成派生类D中具有多份A类的属性，属于一种不合理的现象</p><p><img src="/.com//20190118194303573.png" alt="img"></p><p>会让高层的基类在底层的派生类中拥有多份成员，造成二义性。</p><p>解决方法：使用作用域、利用虚继承</p><p>在使用时加上作用域</p><p><img src="/.com//image-20230319195155868.png" alt="image-20230319195155868"></p><p>但是不能解决多次拷贝的问题</p><h2 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h2><p><img src="/.com//image-20230319195311020.png" alt="image-20230319195311020"></p><p>给所有函数都加上virtual 继承时使用虚继承</p><p><img src="/.com//image-20230319195704646.png" alt="image-20230319195704646"></p><p>使用虚继承时，第一成员是一个指针，指向一个结构体，里面第二成员是一个十六进制偏移。偏移值是父类到子类的偏移。</p><p>虚继承中，父类指针只能访问子类对象被继承的部分。因为在定义的时候，有一个偏移指向对应的数据。</p><p><img src="/.com//image-20230319200336941.png" alt="image-20230319200336941"></p><h2 id="虚表"><a href="#虚表" class="headerlink" title="虚表"></a>虚表</h2><p>将父类中函数定义为虚函数后，会出现一个虚表指针（4或8）在上述结构体的第一成员（第二成员是到子类的偏移），指向一个数组。数组中存放的都是函数，如果孩子实现了这个函数，就会放入孩子的。如果孩子的没实现，就会放入自己的。</p><p><img src="/.com//v2-0fceb07713e411d48b4c361452129585_1440w.webp" alt="img"></p><p>类A是基类，类B继承类A，类C又继承类B。类A，类B，类C，假设在子类有实现，其对象模型如下图所示。</p><p><img src="/.com//v2-dfe4aefdee7e06cf3151b57492ed42a2_1440w.webp" alt="img"></p><p>若菱形继承，两个父类均有对虚函数的实现，而子类没有对虚函数的实现，就会出现二义性问题。一般来说，子类都会进行实现，不会出现这种问题。</p><p>经常在父类的析构函数前加virtual，是为了在释放内存时使用子类的析构函数。</p><h2 id="纯虚类"><a href="#纯虚类" class="headerlink" title="纯虚类"></a>纯虚类</h2><p>父类使用纯虚函数<code>virtual void show() = 0;</code>它不会实例化一个对象，在子类继承的时候也会把纯虚函数继承，它强制性要求，派生类必须实现某个接口，不然无法实例化对象</p><p><img src="/.com//20190116230607742.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>智能指针</title>
      <link href="/2023/03/22/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
      <url>/2023/03/22/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h2 id="智能指针-c-11"><a href="#智能指针-c-11" class="headerlink" title="智能指针 c++11"></a>智能指针 c++11</h2><h3 id="std-unique-ptr-lt-T-gt-：独占资源所有权的指针。"><a href="#std-unique-ptr-lt-T-gt-：独占资源所有权的指针。" class="headerlink" title="std::unique_ptr&lt;T&gt; ：独占资源所有权的指针。"></a><code>std::unique_ptr&lt;T&gt;</code> ：独占资源所有权的指针。</h3><p>当我们独占资源的所有权的时候，可以使用 std::unique_ptr 对资源进行管理——离开 unique_ptr 对象的作用域时，会自动释放资源。</p><p>std::unique_ptr 是 move-only 的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; uptr = std::<span class="built_in">make_unique</span>&lt;<span class="type">int</span>&gt;(<span class="number">200</span>);</span><br><span class="line">std::unique_ptr&lt;<span class="type">int</span>&gt; uptr1 = uptr;  <span class="comment">// 编译错误，std::unique_ptr&lt;T&gt; 是 move-only 的</span></span><br></pre></td></tr></table></figure><p>std::unique_ptr 可以指向一个数组。</p><p>可以自定义 deleter。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">FileCloser</span> &#123;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(FILE* fp)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (fp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                <span class="built_in">fclose</span>(fp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;;  </span><br><span class="line">    <span class="function">std::unique_ptr&lt;FILE, FileCloser&gt; <span class="title">uptr</span><span class="params">(fopen(<span class="string">&quot;test_file.txt&quot;</span>, <span class="string">&quot;w&quot;</span>))</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    std::unique_ptr&lt;FILE, std::function&lt;<span class="type">void</span>(FILE*)&gt;&gt; <span class="built_in">uptr</span>(</span><br><span class="line">        <span class="built_in">fopen</span>(<span class="string">&quot;test_file.txt&quot;</span>, <span class="string">&quot;w&quot;</span>), [](FILE* fp) &#123;</span><br><span class="line">            <span class="built_in">fclose</span>(fp);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="std-shared-ptr-lt-T-gt-：共享资源所有权的指针。"><a href="#std-shared-ptr-lt-T-gt-：共享资源所有权的指针。" class="headerlink" title="std::shared_ptr&lt;T&gt; ：共享资源所有权的指针。"></a><code>std::shared_ptr&lt;T&gt;</code> ：共享资源所有权的指针。</h3><p>其实就是对资源做引用计数——当引用计数为 0 的时候，自动释放资源。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    std::shared_ptr&lt;<span class="type">int</span>&gt; sptr = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">assert</span>(sptr.<span class="built_in">use_count</span>() == <span class="number">1</span>);  <span class="comment">// 此时引用计数为 1</span></span><br><span class="line">    &#123;   </span><br><span class="line">        std::shared_ptr&lt;<span class="type">int</span>&gt; sptr1 = sptr;</span><br><span class="line">        <span class="built_in">assert</span>(sptr.<span class="built_in">get</span>() == sptr1.<span class="built_in">get</span>());</span><br><span class="line">        <span class="built_in">assert</span>(sptr.<span class="built_in">use_count</span>() == <span class="number">2</span>);   <span class="comment">// sptr 和 sptr1 共享资源，引用计数为 2</span></span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="built_in">assert</span>(sptr.<span class="built_in">use_count</span>() == <span class="number">1</span>);   <span class="comment">// sptr1 已经释放</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// use_count 为 0 时自动释放内存</span></span><br></pre></td></tr></table></figure><p>也可以指向数组和自定义 deleter。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// C++20 才支持 std::make_shared&lt;int[]&gt;</span></span><br><span class="line">    <span class="comment">// std::shared_ptr&lt;int[]&gt; sptr = std::make_shared&lt;int[]&gt;(100);</span></span><br><span class="line">    <span class="function">std::shared_ptr&lt;<span class="type">int</span>[]&gt; <span class="title">sptr</span><span class="params">(<span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>])</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        sptr[i] = i * i;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; sptr[i] &lt;&lt; std::endl;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">std::shared_ptr&lt;FILE&gt; <span class="title">sptr</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        fopen(<span class="string">&quot;test_file.txt&quot;</span>, <span class="string">&quot;w&quot;</span>), [](FILE* fp) &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">            std::cout &lt;&lt; <span class="string">&quot;close &quot;</span> &lt;&lt; fp &lt;&lt; std::endl;</span></span></span><br><span class="line"><span class="params"><span class="function">            fclose(fp);</span></span></span><br><span class="line"><span class="params"><span class="function">        &#125;)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 shared_ptr 对象的内存开销要比裸指针和无自定义 deleter 的 unique_ptr 对象略大。</p><p>shared_ptr 需要维护的信息有两部分：</p><ol><li>指向共享资源的指针。</li><li>引用计数等共享资源的控制信息——实现上是维护一个指向控制信息的指针。</li></ol><p>所以，shared_ptr 对象需要保存两个指针。shared_ptr 的 的 deleter 是保存在控制信息中，所以，是否有自定义 deleter 不影响 shared_ptr 对象的大小。</p><p><img src="/.com//v2-e48536157d6181fdb97181769a7c364a_1440w.webp" alt="img"></p><p>不能去掉 shared_ptr 对象中指向共享资源的指针。 因为 shared_ptr 对象中的指针指向的对象不一定和控制块中的指针指向的对象一样。（由于多态的存在，有可能指向父类对象）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Fruit</span> &#123;</span><br><span class="line">    <span class="type">int</span> juice;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vegetable</span> &#123;</span><br><span class="line">    <span class="type">int</span> fiber;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tomato</span> : <span class="keyword">public</span> Fruit, Vegetable &#123;</span><br><span class="line">    <span class="type">int</span> sauce;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 由于继承的存在，shared_ptr 可能指向基类对象</span></span><br><span class="line">std::shared_ptr&lt;Tomato&gt; tomato = std::<span class="built_in">make_shared</span>&lt;Tomato&gt;();</span><br><span class="line">std::shared_ptr&lt;Fruit&gt; fruit = tomato;</span><br><span class="line">std::shared_ptr&lt;Vegetable&gt; vegetable = tomato;</span><br></pre></td></tr></table></figure><p><img src="/.com//v2-8dfc6105c0016d7c22e6212732faf1ef_1440w.webp" alt="img"></p><p>std::shared_ptr 支持 aliasing constructor。</p><p>Aliasing constructor，简单说就是构造出来的 shared_ptr 对象和参数 r 指向同一个控制块（会影响 r 指向的资源的生命周期），但是指向共享资源的指针是参数 ptr。看下面这个例子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Vec = std::vector&lt;<span class="type">int</span>&gt;;</span><br><span class="line"><span class="function">std::shared_ptr&lt;<span class="type">int</span>&gt; <span class="title">GetSPtr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> elts = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">    std::shared_ptr&lt;Vec&gt; pvec = std::<span class="built_in">make_shared</span>&lt;Vec&gt;(elts);</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">shared_ptr</span>&lt;<span class="type">int</span>&gt;(pvec, &amp;(*pvec)[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::shared_ptr&lt;<span class="type">int</span>&gt; sptr = <span class="built_in">GetSPtr</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">-2</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sptr.<span class="built_in">get</span>()[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.com//v2-ada2e2b5dc8551bf879d77a2b484e071_1440w.webp" alt="img"></p><p>使用 std::shared_ptr 时，会涉及两次内存分配：一次分配共享资源对象；一次分配控制块。C++ 标准库提供了 std::make_shared 函数来创建一个 shared_ptr 对象，只需要一次内存分配。</p><p><img src="/.com//v2-49e619699b5c924097e027cd173df758_1440w.webp" alt="img"></p><p>这种情况下，不用通过控制块中的指针，我们也能知道共享资源的位置——这个指针也可以省略掉。</p><p><img src="/.com//v2-4d50514c2c685097588908f69c3dc027_1440w.webp" alt="img"></p><p>成员函数获取 this 的 shared_ptr 的正确的做法是继承 std::enable_shared_from_this。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span> : <span class="keyword">public</span> std::enable_shared_from_this&lt;Bar&gt; &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function">std::shared_ptr&lt;Bar&gt; <span class="title">GetSPtr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">shared_from_this</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> sptr1 = std::<span class="built_in">make_shared</span>&lt;Bar&gt;();</span><br><span class="line"><span class="built_in">assert</span>(sptr1.<span class="built_in">use_count</span>() == <span class="number">1</span>);</span><br><span class="line"><span class="keyword">auto</span> sptr2 = sptr1-&gt;<span class="built_in">GetSPtr</span>();</span><br><span class="line"><span class="built_in">assert</span>(sptr1.<span class="built_in">use_count</span>() == <span class="number">2</span>);</span><br><span class="line"><span class="built_in">assert</span>(sptr2.<span class="built_in">use_count</span>() == <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>一般情况下，继承了 std::enable_shared_from_this 的子类，成员变量中增加了一个指向 this 的 weak_ptr。这个 weak_ptr 在第一次创建 shared_ptr 的时候会被初始化，指向 this。</p><p><img src="/.com//v2-fbbbc83da3c87fe48817a4cbda49ce03_1440w.webp" alt="img"></p><p>似乎继承了 std::enable_shared_from_this 的类都被强制必须通过 shared_ptr 进行管理。如果没有创建shared_ptr 直接调用shared_from_this()方法，将会报错。</p><h3 id="std-weak-ptr-lt-T-gt-：共享资源的观察者，需要和-std-shared-ptr-一起使用，不影响资源的生命周期。"><a href="#std-weak-ptr-lt-T-gt-：共享资源的观察者，需要和-std-shared-ptr-一起使用，不影响资源的生命周期。" class="headerlink" title="std::weak_ptr&lt;T&gt; ：共享资源的观察者，需要和 std::shared_ptr 一起使用，不影响资源的生命周期。"></a><code>std::weak_ptr&lt;T&gt;</code> ：共享资源的观察者，需要和 std::shared_ptr 一起使用，不影响资源的生命周期。</h3><p>std::weak_ptr 要与 std::shared_ptr 一起使用。 一个 std::weak_ptr 对象看做是 std::shared_ptr 对象管理的资源的观察者，它不影响共享资源的生命周期：</p><ol><li>如果需要使用 weak_ptr 正在观察的资源，可以将 weak_ptr 提升为 shared_ptr。</li><li>当 shared_ptr 管理的资源被释放时，weak_ptr 会自动变成 nullptr。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Observe</span><span class="params">(std::weak_ptr&lt;<span class="type">int</span>&gt; wptr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> sptr = wptr.<span class="built_in">lock</span>()) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;value: &quot;</span> &lt;&lt; *sptr &lt;&lt; std::endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;wptr lock fail&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::weak_ptr&lt;<span class="type">int</span>&gt; wptr;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> sptr = std::<span class="built_in">make_shared</span>&lt;<span class="type">int</span>&gt;(<span class="number">111</span>);</span><br><span class="line">    wptr = sptr;</span><br><span class="line">    <span class="built_in">Observe</span>(wptr);  <span class="comment">// sptr 指向的资源没被释放，wptr 可以成功提升为 shared_ptr</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Observe</span>(wptr);  <span class="comment">// sptr 指向的资源已被释放，wptr 无法提升为 shared_ptr</span></span><br></pre></td></tr></table></figure><p>当 shared_ptr 析构并释放共享资源的时候，只要 weak_ptr 对象还存在，控制块就会保留，weak_ptr 可以通过控制块观察到对象是否存活。</p><p><img src="/.com//v2-5f40e9422551bb244753e87ef43d1e64_1440w.webp" alt="img"></p><p><img src="/.com//v2-f387c7135acf9101029fc4981ce2269b_1440w.webp" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++20</title>
      <link href="/2023/03/22/c-20/"/>
      <url>/2023/03/22/c-20/</url>
      
        <content type="html"><![CDATA[<h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><p>语法糖是指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。</p><p>C++也有很多语法糖，比如运算符重载、lambda表达式、auto类型推导等。这些语法糖可以让我们的代码更简洁、更易读、更高效。例如，下面两种写法是等价的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;) &#123;</span><br><span class="line">  sum += i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c++11、20新特性大多数都是语法糖</p><h2 id="c-20"><a href="#c-20" class="headerlink" title="c++20"></a>c++20</h2><p>C++20有很多新的特性，其中最重要的四个是概念、范围、协程和模块。概念可以让我们定义泛型函数或类的约束条件，范围可以让我们更方便地操作容器和迭代器，协程可以让我们编写异步代码，模块可以让我们更高效地组织代码[。除此之外，C++20还有一些其他的新特性，比如三向比较运算符、指定初始化、日历和时区功能等。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>概念是一种用来约束模板类型的语法糖。我们可以用concept关键字来定义一个概念，然后用requires关键字来指定一个模板参数必须满足某个概念。例如，我们可以定义一个Integral概念，表示一个类型必须是整数类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">concept</span> Integral = std::is_integral_v&lt;T&gt;;</span><br><span class="line"><span class="comment">// 然后我们可以用这个概念来约束一个函数模板的参数类型</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;Integral T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">add</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，如果我们传入非整数类型的参数，就会在编译时报错。</p><p>概念可以自定义，使用requires关键字</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">concept</span> Sortable = <span class="built_in">requires</span>(T a) &#123;</span><br><span class="line">  &#123; std::<span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) &#125; -&gt; std::same_as&lt;<span class="type">void</span>&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这个概念要求T类型有begin()和end()方法，并且可以用std::sort函数进行排序</span></span><br></pre></td></tr></table></figure><p>标准库中提供了上百种常用的概念，放在和等头文件中。比较常用的一些有：std::same_as, std::derived_from, std::convertible_to, std::floating_point等</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;concepts&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;std::integral T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">add</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p>范围是C++20加入的一个重要的库功能，它提供了描述范围和对范围的操作的统一接口1。一个范围是可以循环访问的任何东西，比如一个容器或者一个数组2。我们可以用begin()和end()函数来获取一个范围的起始和终止位置3。我们也可以用基于范围的for语句来遍历一个范围中的所有元素。例如，我们可以这样打印一个vector中的所有元素：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> x : v) &#123;</span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的类型，满足range概念，都可以使用范围的特性。即它可以用begin()和end()函数来获取其起始和终止位置。这两个函数返回的对象必须是迭代器或者哨兵。迭代器是可以用++和*操作符来遍历元素的对象，哨兵是可以用&#x3D;&#x3D;操作符来判断是否到达范围的末尾的对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ranges&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntRange</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">IntRange</span>(<span class="type">int</span> a, <span class="type">int</span> b) : <span class="built_in">a_</span>(a), <span class="built_in">b_</span>(b) &#123;&#125;</span><br><span class="line">  <span class="comment">// 迭代器</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Iterator</span>(<span class="type">int</span> x) : <span class="built_in">x_</span>(x) &#123;&#125;</span><br><span class="line">    <span class="type">int</span> <span class="keyword">operator</span>*() <span class="type">const</span> &#123; <span class="keyword">return</span> x_; &#125;</span><br><span class="line">    Iterator&amp; <span class="keyword">operator</span>++() &#123; ++x_; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Iterator&amp; other) <span class="type">const</span> &#123; <span class="keyword">return</span> x_ == other.x_; &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Iterator&amp; other) <span class="type">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> == other); &#125;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x_;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 哨兵</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Sentinel</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Sentinel</span>(<span class="type">int</span> y) : <span class="built_in">y_</span>(y) &#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Iterator&amp; iter) <span class="type">const</span> &#123; <span class="keyword">return</span> *iter == y_; &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Iterator&amp; iter) <span class="type">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> == iter); &#125;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> y_;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// begin()和end()函数</span></span><br><span class="line">  <span class="function">Iterator <span class="title">begin</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Iterator</span>(a_); &#125;</span><br><span class="line">  <span class="function">Sentinel <span class="title">end</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Sentinel</span>(b_); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> a_, b_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">IntRange <span class="title">r</span><span class="params">(<span class="number">1</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> x : r) &#123;</span><br><span class="line">    std::cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>协程是一种可以在执行过程中被挂起和恢复的函数。它可以用来实现异步编程，提高性能和并发度。</p><p>C++20中引入了三个新的关键字，co_await，co_yield和co_return，用来标记一个函数是协程。这些关键字只是语法糖，编译器会将协程的上下文打包成一个对象，并让未执行完的协程先返回给调用者。要实现一个C++20协程，还需要提供两个鸭子类型，promise type和awaiter type，分别用来管理协程的生命周期和等待机制。</p><p>例如，我们可以实现一个简单的生成器协程，它每次产生一个整数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;coroutine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// promise type</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Generator</span> &#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">promise_type</span> &#123;</span><br><span class="line">    <span class="type">int</span> current_value;</span><br><span class="line">    <span class="function">std::suspend_always <span class="title">yield_value</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;current_value = value;</span><br><span class="line">      <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::suspend_always <span class="title">initial_suspend</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> &#123;&#125;; &#125;</span><br><span class="line">    <span class="function">std::suspend_always <span class="title">final_suspend</span><span class="params">()</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> &#123;&#125;; &#125;</span><br><span class="line">    <span class="function">Generator <span class="title">get_return_object</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> Generator&#123;std::coroutine_handle&lt;promise_type&gt;::<span class="built_in">from_promise</span>(*<span class="keyword">this</span>)&#125;; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">unhandled_exception</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// awaiter type</span></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">move_next</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    p.<span class="built_in">resume</span>(); </span><br><span class="line">    <span class="keyword">return</span> !p.<span class="built_in">done</span>(); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">current_value</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> p.<span class="built_in">promise</span>().current_value; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  std::coroutine_handle&lt;promise_type&gt; p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 协程函数</span></span><br><span class="line"><span class="function">Generator <span class="title">generator</span><span class="params">(<span class="type">int</span> start = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> i = start;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">co_yield</span> i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> g = <span class="built_in">generator</span>(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    g.<span class="built_in">move_next</span>();</span><br><span class="line">    std::cout &lt;&lt; g.<span class="built_in">current_value</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用协程实现异步网络编程的主要优点是可以用同步的语法写出异步的代码，提高代码的可读性和可维护性1。要使用协程实现异步网络编程，需要以下几个步骤：</p><ul><li><p>使用标准库中提供的std::jthread或std::thread创建一个或多个工作线程，用来执行协程任务。</p></li><li><p>使用标准库中提供的std::coroutine_handle或自定义的协程句柄类型，管理协程的生命周期和调度。</p></li><li><p>使用标准库中提供的std::future或自定义的awaiter类型，等待异步操作完成并获取结果。</p></li><li><p>使用标准库中提供的std::sync_wait或自定义的同步等待函数，等待所有协程任务完成后退出程序。</p></li></ul><p>例如，我们可以使用一个简单的网络框架ZED3，它提供了一些基本的异步IO操作，并封装了协程句柄和awaiter类型。我们可以用以下代码实现一个简单的回显服务器：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;zed/net.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> zed;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个io_context对象</span></span><br><span class="line">  io_context ctx;</span><br><span class="line">  <span class="comment">// 创建一个工作线程</span></span><br><span class="line">  <span class="function">std::jthread <span class="title">th</span><span class="params">([&amp;ctx]() &#123; ctx.run(); &#125;)</span></span>;</span><br><span class="line">  <span class="comment">// 创建一个tcp服务器</span></span><br><span class="line">  <span class="function">tcp_server <span class="title">server</span><span class="params">(ctx)</span></span>;</span><br><span class="line">  <span class="comment">// 绑定端口</span></span><br><span class="line">  server.<span class="built_in">bind</span>(<span class="number">8080</span>);</span><br><span class="line">  <span class="comment">// 开始监听</span></span><br><span class="line">  server.<span class="built_in">listen</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 接受连接，并返回一个tcp_socket对象</span></span><br><span class="line">      <span class="keyword">auto</span> socket = <span class="keyword">co_await</span> server.<span class="built_in">accept</span>();</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;New connection from &quot;</span> &lt;&lt; socket.<span class="built_in">remote_endpoint</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 接收数据，并返回接收到的字节数</span></span><br><span class="line">        <span class="keyword">auto</span> n = <span class="keyword">co_await</span> socket.<span class="built_in">recv</span>();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>; <span class="comment">// 连接断开</span></span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Received &quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot; bytes\n&quot;</span>;</span><br><span class="line">        <span class="comment">// 发送数据，并返回发送出去的字节数</span></span><br><span class="line">        <span class="keyword">auto</span> m = <span class="keyword">co_await</span> socket.<span class="built_in">send</span>(n);</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Sent &quot;</span> &lt;&lt; m &lt;&lt; <span class="string">&quot; bytes\n&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      std::cout &lt;&lt; <span class="string">&quot;Connection closed\n&quot;</span>;</span><br><span class="line">    &#125; <span class="built_in">catch</span> (<span class="type">const</span> std::exception&amp; e) &#123;</span><br><span class="line">      std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>C++20模块是一种新的代码组织和重用的方式，它可以替代传统的头文件和翻译单元。模块可以提高编译速度，避免宏污染，隐藏实现细节，简化依赖关系等优点。要使用模块，需要以下几个步骤：</p><ul><li><p>在源文件中使用module关键字声明一个模块，并指定模块名。</p></li><li><p>在源文件中使用export关键字导出需要对外提供的符号。</p></li><li><p>在其他源文件中使用import关键字导入需要使用的模块。</p></li><li><p>使用支持模块的编译器编译源文件，并生成相应的模块接口文件和目标文件。</p></li></ul><p>例如，我们可以用以下代码定义一个名为hello的模块：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.cppm</span></span><br><span class="line"><span class="keyword">module</span> hello; <span class="comment">// 声明一个名为hello的模块</span></span><br><span class="line"><span class="function"><span class="keyword">export</span> <span class="type">void</span> <span class="title">say_hello</span><span class="params">()</span></span>; <span class="comment">// 导出一个名为say_hello的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">say_hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Hello, world!\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们可以在另一个源文件中导入并使用这个模块：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="keyword">import</span> hello; <span class="comment">// 导入hello模块</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">say_hello</span>(); <span class="comment">// 调用say_hello函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子模块是一种在逻辑上划分模块的方法，它可以让用户选择性地导入模块的一部分或全部内容。子模块的命名规则中允许点存在于模块名字当中，但点并不代表语法上的从属关系，而只是帮助程序员理解模块间的逻辑关系。</p><p>例如，我们可以用以下代码定义一个名为hello.sub_a的子模块：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.sub_a.cppm</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">module</span> hello.sub_a; <span class="comment">// 声明一个名为hello.sub_a的子模块</span></span><br><span class="line"><span class="function"><span class="keyword">export</span> <span class="type">void</span> <span class="title">say_hello_sub_a</span><span class="params">()</span></span>; <span class="comment">// 导出一个名为say_hello_sub_a的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">say_hello_sub_a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Hello, sub a!\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们可以在另一个源文件中定义一个名为hello.sub_b的子模块：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.sub_b.cppm</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">module</span> hello.sub_b; <span class="comment">// 声明一个名为hello.sub_b的子模块</span></span><br><span class="line"><span class="function"><span class="keyword">export</span> <span class="type">void</span> <span class="title">say_hello_sub_b</span><span class="params">()</span></span>; <span class="comment">// 导出一个名为say_hello_sub_b的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">say_hello_sub_b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;Hello, sub b!\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们可以在另一个源文件中定义一个名为hello的父模块，它导出了两个子模块：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.cppm</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">module</span> hello; <span class="comment">// 声明一个名为hello的父模块</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">import</span> hello.sub_a; <span class="comment">// 导出并导入hello.sub_a子模块</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">import</span> hello.sub_b; <span class="comment">// 导出并导入hello.sub_b子模块</span></span><br></pre></td></tr></table></figure><p>这样，用户就可以根据需要导入不同的子模块或父模块：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="keyword">import</span> hello; <span class="comment">// 导入hello父模块，相当于同时导入了两个子模块</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">say_hello_sub_a</span>(); <span class="comment">// 调用say_hello_sub_a函数</span></span><br><span class="line">  <span class="built_in">say_hello_sub_b</span>(); <span class="comment">// 调用say_hello_sub_b函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命名空间冲突是指不同的模块或源文件中定义了相同的名称，导致编译器无法区分它们的含义。C++20 模块提供了一些方法来避免或解决命名空间冲突：</p><ul><li><p>使用不同的模块名字来区分不同的模块，例如 hello.sub_a 和 hello.sub_b 就是两个不同的模块，即使它们都定义了 say_hello 函数，也不会发生冲突。</p></li><li><p>使用限定名字来指定模块中的名称，例如 hello.sub_a::say_hello 和 hello.sub_b::say_hello 就可以明确地区分两个模块中的函数。</p></li><li><p>使用 using 声明或 using 指令来引入需要的名称，但要注意避免引入重复或冲突的名称。例如:</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="keyword">import</span> hello; <span class="comment">// 导入hello父模块</span></span><br><span class="line"><span class="keyword">using</span> hello.sub_a::say_hello; <span class="comment">// 引入hello.sub_a中的say_hello函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">say_hello</span>(); <span class="comment">// 调用hello.sub_a中的say_hello函数</span></span><br><span class="line">  hello.sub_b::<span class="built_in">say_hello</span>(); <span class="comment">// 调用hello.sub_b中的say_hello函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 export 关键字来控制哪些名称被导出到其他模块或源文件，以减少暴露给外部的名称。例如：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.cppm</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">module</span> math; <span class="comment">// 声明一个名为math的模块</span></span><br><span class="line"><span class="keyword">namespace</span> detail &#123; <span class="comment">// 定义一个未导出的命名空间detail</span></span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x + y; &#125; <span class="comment">// 定义一个未导出的函数add</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">export</span> <span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123; <span class="keyword">return</span> detail::<span class="built_in">add</span>(x, y); &#125; <span class="comment">// 定义并导出一个函数sum，它调用了detail命名空间中的add函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="keyword">import</span> math; <span class="comment">// 导入math模块</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> s = math::<span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 调用math模块中导出的sum函数</span></span><br><span class="line">  <span class="type">int</span> a = math::detail::<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 错误：math模块没有导出detail命名空间或add函数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用</title>
      <link href="/2023/03/22/%E5%BC%95%E7%94%A8/"/>
      <url>/2023/03/22/%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="指针与引用"><a href="#指针与引用" class="headerlink" title="指针与引用"></a>指针与引用</h2><p>引用必须要初始化。</p><p>指针会根据编译器不同而变化，32位4字节，64位8字节</p><p>引用根据被引用的数据类型变化</p><p>int*&amp; 指针的引用 以指针来判断。</p><h2 id="右值引用-c-11"><a href="#右值引用-c-11" class="headerlink" title="右值引用 c++11"></a>右值引用 c++11</h2><ol><li>左值：可以长时间保存，可以存在于&#x3D;左边的值，可以取地址；</li><li>右值：临时值，不能存在于&#x3D;左边的值，不可以取地址。</li></ol><p>左值引用，实际上是取地址赋给新的变量。必须初始化。</p><p>常引用，用于引用部分右值，不可进行更改。实际上是使用一个临时变量与一块临时内存进行存储，必须初始化。可以引用左与右。</p><p><img src="/.com//image-20230318004324533.png" alt="image-20230318004324533"></p><p>右值引用原理相近，临时内存的地址无法获取，但是可以对临时内存里面的内容进行修改。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>&amp;&amp; v1 = <span class="number">10</span>;</span><br><span class="line">v1++;</span><br></pre></td></tr></table></figure><p>  右值引用是C++11新特性，之所以引入右值引用，是为了提高效率。如下面所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">size_t</span> N):<span class="built_in">m_p</span>(<span class="keyword">new</span> <span class="type">char</span>[N])</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">A</span>(<span class="type">const</span> A &amp; a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> != &amp;a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[]m_p;</span><br><span class="line">m_p = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(m_p) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">memcpy</span>(m_p, a.m_p, <span class="built_in">strlen</span>(m_p) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> []m_p;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> *m_p = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function">A <span class="title">createA</span><span class="params">(<span class="type">size_t</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">A</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(A a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">func</span>(<span class="built_in">createA</span>(<span class="number">100</span>));</span><br><span class="line"> </span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里会导致大量得调用A得构造函数，不考虑编译优化，原本执行如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">createA(100)，执行A(100)调用A(size_t)构造函数一次；</span><br><span class="line">退出createA，临时构造得A(100)，释放调用析构函数一次；</span><br><span class="line">赋给返回值会调用一次拷贝构造函数一次；</span><br><span class="line">返回值传入func中形参会调用拷贝构造函数一次；</span><br><span class="line">func运行完成后形参释放，调用A析构函数一次；</span><br><span class="line">返回值使用完成释放，调用A析构函数一次；</span><br></pre></td></tr></table></figure><p>从上面可以看出有大量得构造、析构调用 ，但是我们做的工作无非就是临时构造一个A(100)给func使用而已。那么可否将临时A(100)始终一份给到func使用呢？答案就是右值引用。如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="type">size_t</span> N):<span class="built_in">m_p</span>(<span class="keyword">new</span> <span class="type">char</span>[N])</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">A</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> []m_p;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">char</span> *m_p = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function">A&amp;&amp; <span class="title">createA</span><span class="params">(<span class="type">size_t</span> N)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (A&amp;&amp;)<span class="built_in">A</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(A&amp;&amp; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">func</span>(<span class="built_in">createA</span>(<span class="number">100</span>));</span><br><span class="line"> </span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我们将临时A(100)强制转换为了右值引用，同时func形参也是右值引用，也就是将临时对象延长到了func中，中间避免了其他构造和析构调用，提高了效率。</p><p>​    注意到我们将A得拷贝构造函数去掉了，因为已经用不到。如果原版写法，去掉拷贝构造函数会崩溃，因为会自动调用默认拷贝构造函数，是浅拷贝，中间临时对象会提前删除公共内存，后面对象再次释放是就会重复删除内存导致崩溃。</p><p>这就是<strong>移动</strong>。它可以让你将一个对象的资源（如内存、文件句柄等）从一个临时的右值转移给另一个对象，而不需要进行深拷贝这样可以提高性能，避免不必要的内存分配和释放</p><p><img src="/.com//image-20230319210844838.png" alt="image-20230319210844838"></p><p>std::move可以转换左值引用为右值引用。实现原理实际上就是强制转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> &amp;&amp;t = std::<span class="built_in">move</span>(a);</span><br><span class="line"><span class="type">int</span> &amp;&amp;t2 = std::<span class="built_in">move</span>(<span class="number">3</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> &amp;&amp;t = (<span class="type">int</span> &amp;&amp;)a;</span><br><span class="line">t = <span class="number">9</span>;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;  <span class="comment">// a = 9</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>std::unique_ptr<T>不能相等，因为他们是不可以拷贝的，因此不可以左值赋给左值。使用移动，把左值转换成右值，就可以让二者相等。</T></p><p><img src="/.com//image-20230319211406922.png" alt="image-20230319211406922"></p><h2 id="通用引用"><a href="#通用引用" class="headerlink" title="通用引用"></a>通用引用</h2><p>通用引用就是根据接受值类型可以自行推导是左值引用还是右值引用。</p><p>如果声明变量或参数具有T&amp;&amp;某种推导类型的类型 T，则该变量或参数为通用引用，否则就是右值引用（无法传入左值）。</p><p>也就是传入的参数在编译时需要推导，如果不需要推导，则不是通用引用。如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T &amp;&amp;)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">B&lt;<span class="type">int</span>&gt; b;</span><br><span class="line">b.<span class="built_in">print</span>(<span class="number">3</span>);   <span class="comment">// 为右值引用</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在编译print之前print中的参数已经由B<int> b确定了，所以在print编译时无需推导，故B中的T&amp;&amp;为右值引用。如果改为如下：</int></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Arg&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(Arg &amp;&amp;)</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">B&lt;<span class="type">int</span>&gt; b;</span><br><span class="line">b.<span class="built_in">print</span>(<span class="number">3</span>);   <span class="comment">// 为右值引用</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 因为print时函数模板形参和类模板形参类型时独立的，故在编译print时是需要推导的，故Arg&amp;&amp;为通用引用。</p><h2 id="引用折叠"><a href="#引用折叠" class="headerlink" title="引用折叠"></a>引用折叠</h2><p>引用虽然形式上是右值引用，但是却可以接受左值，这是怎么实现的呢？这就是引用折叠。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(T&amp;&amp; t)</span>   </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="built_in">print</span>(a);</span><br><span class="line"><span class="built_in">print</span>(<span class="number">9</span>);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>print(a)时，因为a为左值,会被推导成print(int&amp; &amp;&amp;t)形式，int&amp; &amp;&amp;t 会被折叠为int &amp;，所以最终形式为print(int &amp;)。（左值被推导为左值引用）</p><p> print(9)时，为9为右值，所以被推导为print(int&amp;&amp; &amp;&amp;)形式，而int&amp;&amp; &amp;&amp;会被折叠为int&amp;&amp;，所以最终形式为print(int&amp;&amp;)。（右值被推导为右值引用）</p><p>引用类型只有两种，所以折叠形式就是4中，为：T&amp; &amp;,T&amp; &amp;&amp;,T&amp;&amp; &amp;,T&amp;&amp; &amp;&amp;。引用折叠规则概况为两种：</p><p>T&amp;&amp; &amp;&amp;折叠为T&amp;&amp;;</p><p>其他折叠为T&amp;.</p><h2 id="完美转发"><a href="#完美转发" class="headerlink" title="完美转发"></a>完美转发</h2><p>通用引用既可以接受左值也可以接受右值，但是通用引用本身是左值。如果在函数模板中继续传递该值给其他函数，势必会改变该值的属性，即都为左值引用。</p><p>使用std::forward<T>(a)可以进行完美转发，使值属性和之前保持一致。某个功能对左值和右值处理情况不一致，如果将左值和右值引用当作同一种情况使用，可能会会有性能损失。例如左值进行深拷贝，右值进行移动。</T></p><p>原理是使用了引用折叠。具有推导类型的T&amp;&amp;转换会进行引用折叠。而int&amp;&amp;类型是确定的，不能进行折叠。</p><p>有两套，传入的为左或右，用右值进行强制类型转换，左右转化为左，右右转化为右</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo快速入门</title>
      <link href="/2023/03/20/hexo%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2023/03/20/hexo%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><span id="more"></span><p>新开一个文件夹，右键，在这里打开git bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><h2 id="配置github-SSH"><a href="#配置github-SSH" class="headerlink" title="配置github SSH"></a>配置github SSH</h2><p>ssh可以免密的将本地的源码和资源上传到github，无需要每次都输账号和密码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure><p>在用户文件夹下生成了一个.ssh文件夹，进入，复制.pub文件中全部内容</p><p>打开github主页，点击个人设置，点击左侧的SSH and GPG keys，点击New SSH key</p><p>将id_rsa.pub复制的内容粘贴到key中，title随便起一个就行。</p><p>配置好用户名和邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxx&quot;</span> <span class="comment">#你的github用户名</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxx@163.com&quot;</span> <span class="comment">#填写你的github注册邮箱</span></span><br></pre></td></tr></table></figure><h1 id="写个人博客"><a href="#写个人博客" class="headerlink" title="写个人博客"></a>写个人博客</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="新建一个博客"><a href="#新建一个博客" class="headerlink" title="新建一个博客"></a>新建一个博客</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &lt;title&gt;</span><br></pre></td></tr></table></figure><p>存放地址：<code>source/_posts</code></p><h2 id="解决图片问题"><a href="#解决图片问题" class="headerlink" title="解决图片问题"></a>解决图片问题</h2><p>_config.yml文件做如下修改：<code>yaml post_asset_folder: true</code></p><p>创建同名文件夹，可以放入图片</p><p>使用的是Typora编辑器，可以在编辑器的文件&#x2F;偏好设置&#x2F;图像中进行如下设置：</p><p>复制到指定路径<code>./$(filename)/</code></p><p>安装图片显示插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image</span><br></pre></td></tr></table></figure><h2 id="生成本地静态网站并预览"><a href="#生成本地静态网站并预览" class="headerlink" title="生成本地静态网站并预览"></a>生成本地静态网站并预览</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="截断"><a href="#截断" class="headerlink" title="截断"></a>截断</h2><p>在文章中加入<code>&lt;!--more--&gt;</code>或在开头加入description: xxx</p><h1 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h1><p>新建一个库，名字叫 username.github.io</p><h2 id="将本地库与远端github仓库绑定"><a href="#将本地库与远端github仓库绑定" class="headerlink" title="将本地库与远端github仓库绑定"></a>将本地库与远端github仓库绑定</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;commit&quot;</span></span><br><span class="line">git remote add origin 仓库的http地址</span><br><span class="line">git pull --rebase origin main</span><br><span class="line">git push [-u] origin main</span><br></pre></td></tr></table></figure><h2 id="编辑-config-yml"><a href="#编辑-config-yml" class="headerlink" title="编辑_config.yml"></a>编辑_config.yml</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy<span class="punctuation">:</span></span><br><span class="line">  type<span class="punctuation">:</span> git</span><br><span class="line">  repository<span class="punctuation">:</span> 仓库的ssh地址</span><br><span class="line">  branch<span class="punctuation">:</span> main</span><br></pre></td></tr></table></figure><h2 id="在bash部署"><a href="#在bash部署" class="headerlink" title="在bash部署"></a>在bash部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h1 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><h2 id="下载对应的主题"><a href="#下载对应的主题" class="headerlink" title="下载对应的主题"></a>下载对应的主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h2 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h2><p>编辑_config.yml</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme<span class="punctuation">:</span> butterfly</span><br></pre></td></tr></table></figure><h2 id="主题文档"><a href="#主题文档" class="headerlink" title="主题文档"></a>主题文档</h2><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://butterfly.js.org/posts/21cfbf15/</span><br></pre></td></tr></table></figure><h1 id="开启live2d"><a href="#开启live2d" class="headerlink" title="开启live2d"></a>开启live2d</h1><h2 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><h2 id="下载model文件"><a href="#下载model文件" class="headerlink" title="下载model文件"></a>下载model文件</h2><h3 id="模型浏览"><a href="#模型浏览" class="headerlink" title="模型浏览"></a>模型浏览</h3><p>live2d-widget-model-chitose<br>live2d-widget-model-epsilon2_1<br>live2d-widget-model-gf<br>live2d-widget-model-haru_01<br>live2d-widget-model-haru_02<br>live2d-widget-model-haruto<br>live2d-widget-model-hibiki<br>live2d-widget-model-hijiki<br>live2d-widget-model-izumi<br>live2d-widget-model-koharu<br>live2d-widget-model-miku<br>live2d-widget-model-nico<br>live2d-widget-model-nietzsche<br>live2d-widget-model-ni-j<br>live2d-widget-model-nipsilon<br>live2d-widget-model-nito<br>live2d-widget-model-shizuku<br>live2d-widget-model-tororo<br>live2d-widget-model-tsumiki<br>live2d-widget-model-unitychan<br>live2d-widget-model-wanko<br>live2d-widget-model-z16</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/wang_123_zy/article/details/87181892</span><br></pre></td></tr></table></figure><h3 id="模型下载"><a href="#模型下载" class="headerlink" title="模型下载"></a>模型下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-shizuku</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置Hexo的主<code>_config.yml</code>或者使用的主题的<code>_config.yml</code></p><p>添加以下代码到配置文件中：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">## Live2D看板娘</span><br><span class="line">live2d<span class="punctuation">:</span></span><br><span class="line">  enable<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  pluginModelPath<span class="punctuation">:</span> assets/</span><br><span class="line">  model<span class="punctuation">:</span></span><br><span class="line">    #模板目录，在node_modules里</span><br><span class="line">    use<span class="punctuation">:</span> live2d-widget-model-shizuku  </span><br><span class="line">  display<span class="punctuation">:</span></span><br><span class="line">    position<span class="punctuation">:</span> right</span><br><span class="line">    width<span class="punctuation">:</span> <span class="number">300</span> </span><br><span class="line">    height<span class="punctuation">:</span> <span class="number">600</span></span><br><span class="line">  mobile<span class="punctuation">:</span></span><br><span class="line">    # 在手机端显示</span><br><span class="line">    show<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span>   </span><br><span class="line">  rect<span class="punctuation">:</span></span><br><span class="line">    opacity<span class="punctuation">:</span><span class="number">0.7</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
